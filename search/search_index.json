{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flameborn Project Overview","text":"<p>The Flameborn project consists of two main segments: Core and SDK.</p>"},{"location":"#core","title":"Core","text":"<p>The Core segment directly handles game and player-related features. It includes in-game functionalities such as:</p> <ul> <li>Navigating the game scene by touching the screen</li> <li>Selecting game characters by tapping</li> <li>Commanding game characters by tapping (e.g., walk, gather)</li> </ul> <p>The Core segment ensures that player actions are accurately processed and reflected in the game environment.</p>"},{"location":"#sdk","title":"SDK","text":"<p>The SDK provides API support for the Core segment and is designed to work with various APIs through its abstraction structure. Currently, the SDK layer uses PlayFab for user identity registration and authentication, cloud data storage, and data synchronization via Azure tables using cloud scripts and function apps. The SDK ensures accurate processing and synchronization of player data between PlayFab and Azure, and then injects this processed data into the game.</p> <p>The SDK layer also uses Photon Network API to distribute player information among players. Flameborn supports multiplayer functionality through Photon Network API. Match information created using match-making tickets from PlayFab is integrated with Photon to create rooms and start matches. Photon ensures real-time synchronization of essential character attributes, such as position and animation, among players.</p>"},{"location":"#game-features","title":"Game Features","text":"<ul> <li>Navigation: Players can navigate the game scene by touching the screen.</li> <li>Character Selection: Players can select game characters by tapping on them.</li> <li>Commanding Characters: Players can command their characters to perform actions like walking or gathering resources by tapping on them.</li> <li>Score Update: Scores obtained by players in a match are updated in the cloud using function apps.</li> <li>Resource Management: Resources collected in-game are converted to a virtual currency called Rating, which can be spent in-game.</li> <li>Matchmaking: Rating is also used to match players during matchmaking.</li> </ul>"},{"location":"#multiplayer-functionality","title":"Multiplayer Functionality","text":"<p>Flameborn uses the Photon Network API to support multiplayer features. Match information generated from PlayFab match-making tickets is used to create rooms and start matches through Photon. Photon handles the real-time synchronization of player data, animations, and other critical character attributes among players.</p>"},{"location":"#data-synchronization","title":"Data Synchronization","text":"<p>The SDK ensures seamless data synchronization between PlayFab and Azure, maintaining accurate player data across platforms. This synchronization is crucial for injecting accurate player information into the game.</p> <p>For more detailed information about the project, please refer to the README.</p> <p>For the development log and daily updates, check out the Daily-Log.</p> <ul> <li>My Development Diaries</li> <li>Game Design Document</li> <li>Architecture Diagram</li> </ul>"},{"location":"Account/","title":"Account Class Documentation","text":""},{"location":"Account/#overview","title":"Overview","text":"<p>The <code>Account</code> class represents an account with user data management functionalities within the Flameborn SDK. This class implements the <code>IAccount</code> interface.</p>"},{"location":"Account/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Core.User;\nusing Newtonsoft.Json;\nusing UnityEngine;\n\nnamespace flameborn.Core.Accounts\n{\n    [Serializable]\n    public class Account : IAccount\n    {\n        #region Fields\n\n        [field: SerializeField] private string deviceId = \"\";\n        [field: SerializeField] private string email = \"\";\n        [field: SerializeField] private string password = \"\";\n        [field: SerializeField] private UserData userData = new UserData();\n\n        #endregion\n\n        #region Properties\n\n        [field: SerializeField] public bool IsAccountLoaded { get; set; } = false;\n        [field: SerializeField] public bool IsAccountLoggedIn { get; set; } = false;\n        public string PlayfabId { get; set; } = string.Empty;\n\n        [JsonProperty(\"email\")]\n        public string Email\n        {\n            get =&gt; email;\n            set =&gt; email = value;\n        }\n\n        [JsonProperty(\"password\")]\n        public string Password\n        {\n            get =&gt; password;\n            set =&gt; password = value;\n        }\n\n        [JsonProperty(\"deviceId\")]\n        public string DeviceId\n        {\n            get =&gt; deviceId;\n            set =&gt; deviceId = value;\n        }\n\n        public UserData UserData\n        {\n            get =&gt; userData;\n            set =&gt; userData = value;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sets the user data for the account.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"data\"&gt;The user data to be set.&lt;/param&gt;\n        public void SetUserData(UserData data)\n        {\n            userData = data;\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"Account/#fields","title":"Fields","text":"<ul> <li>deviceId: The device ID associated with the account.</li> <li>email: The email address associated with the account.</li> <li>password: The password for the account.</li> <li>userData: The user data associated with the account.</li> </ul>"},{"location":"Account/#properties","title":"Properties","text":"<ul> <li>IsAccountLoaded: Indicates whether the account is loaded.</li> <li>IsAccountLoggedIn: Indicates whether the account is logged in.</li> <li>PlayfabId: The PlayFab ID associated with the account.</li> <li>Email: Gets or sets the email address.</li> <li>Password: Gets or sets the password.</li> <li>DeviceId: Gets or sets the device ID.</li> <li>UserData: Gets or sets the user data.</li> </ul>"},{"location":"Account/#methods","title":"Methods","text":""},{"location":"Account/#public-methods","title":"Public Methods","text":"<ul> <li>SetUserData(UserData data): Sets the user data for the account.</li> <li>Parameters:<ul> <li>data: The user data to be set.</li> </ul> </li> </ul>"},{"location":"Account/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>Account</code> class in a Unity project.</p> <pre><code>using flameborn.Core.User;\nusing flameborn.Core.Accounts;\nusing UnityEngine;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var account = new Account\n        {\n            Email = \"example@example.com\",\n            Password = \"password123\",\n            DeviceId = \"device-id\"\n        };\n\n        var userData = new UserData\n        {\n            UserName = \"Player1\",\n            Rating = 100,\n            LaunchCount = 5\n        };\n\n        account.SetUserData(userData);\n\n        Debug.Log(\"User Name: \" + account.UserData.UserName);\n        Debug.Log(\"Rating: \" + account.UserData.Rating);\n        Debug.Log(\"Launch Count: \" + account.UserData.LaunchCount);\n    }\n}\n</code></pre>"},{"location":"Account/#see-also","title":"See Also","text":"<p>For more information on the <code>IAccount</code> interface, refer to the IAccount documentation.</p>"},{"location":"Account/#file-location","title":"File Location","text":"<p>This class is defined in the <code>Account.cs</code> file, located in the <code>flameborn.Core.Accounts</code> namespace.</p>"},{"location":"AccountInfoResponse/","title":"AccountInfoResponse Class Documentation","text":""},{"location":"AccountInfoResponse/#overview","title":"Overview","text":"<p>The <code>AccountInfoResponse</code> class represents the response for account information in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>IAccountInfoResponse</code> interface.</p>"},{"location":"AccountInfoResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data.Entity\n</code></pre>"},{"location":"AccountInfoResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>IAccountInfoResponse</code></li> </ul>"},{"location":"AccountInfoResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"AccountInfoResponse/#properties","title":"Properties","text":""},{"location":"AccountInfoResponse/#launchcount","title":"<code>LaunchCount</code>","text":"<p>Gets or sets the launch count.</p>"},{"location":"AccountInfoResponse/#syntax","title":"Syntax","text":"<pre><code>public int LaunchCount { get; set; }\n</code></pre>"},{"location":"AccountInfoResponse/#rating","title":"<code>Rating</code>","text":"<p>Gets or sets the rating.</p>"},{"location":"AccountInfoResponse/#syntax_1","title":"Syntax","text":"<pre><code>public int Rating { get; set; }\n</code></pre>"},{"location":"AccountInfoResponse/#username","title":"<code>UserName</code>","text":"<p>Gets or sets the user name.</p>"},{"location":"AccountInfoResponse/#syntax_2","title":"Syntax","text":"<pre><code>public string UserName { get; set; }\n</code></pre>"},{"location":"AccountInfoResponse/#methods","title":"Methods","text":""},{"location":"AccountInfoResponse/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"AccountInfoResponse/#syntax_3","title":"Syntax","text":"<pre><code>public void SetResponse&lt;T&gt;(bool isSuccess, string userName, int rating, int launchCount, T response, string message = \"\");\n</code></pre>"},{"location":"AccountInfoResponse/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>userName: <code>string</code> - The user name.</li> <li>rating: <code>int</code> - The rating.</li> <li>launchCount: <code>int</code> - The launch count.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"AccountInfoResponse/#example","title":"Example","text":"<pre><code>AccountInfoResponse accountInfoResponse = new AccountInfoResponse();\naccountInfoResponse.SetResponse(true, \"User123\", 1500, 10, new object(), \"Success\");\n// Use accountInfoResponse in your logic\n</code></pre>"},{"location":"AccountInfoResponse/#references","title":"References","text":"<ul> <li>IAccountInfoResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"AccountManager/","title":"AccountManager Class Documentation","text":""},{"location":"AccountManager/#overview","title":"Overview","text":"<p>The <code>AccountManager</code> class manages account-related operations such as login, registration, and statistics updates. This class is a singleton derived from <code>MonoBehaviourSingleton</code> and implements the <code>IAccountManager</code> interface.</p>"},{"location":"AccountManager/#class-definition","title":"Class Definition","text":"<pre><code>using HF.Library.Utilities.Singleton;\nusing HF.Logger;\nusing PlayFab;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\nusing flameborn.Core.Accounts;\nusing flameborn.Core.User;\nusing flameborn.Sdk.Controllers.Data;\nusing flameborn.Sdk.Controllers.Login;\nusing flameborn.Sdk.Managers.Abstract;\nusing flameborn.Sdk.Requests.Data.Abstract;\nusing flameborn.Sdk.Requests.Data;\nusing flameborn.Sdk.Requests.Login.Abstract;\nusing flameborn.Sdk.Requests.Login;\n\nnamespace flameborn.Core.Managers\n{\n    /// &lt;summary&gt;\n    /// Manages account-related operations including login, registration, and statistics updates.\n    /// &lt;/summary&gt;\n    public class AccountManager : MonoBehaviourSingleton&lt;AccountManager&gt;, IAccountManager\n    {\n        #region Fields\n\n        private Account account = new Account();\n        private UiManager uiManager;\n        private bool isRegisterProcess;\n        private bool isStartProcess;\n\n        #endregion\n\n        #region Properties\n\n        /// &lt;summary&gt;\n        /// Gets or sets the current account.\n        /// &lt;/summary&gt;\n        public Account Account { get =&gt; account; set =&gt; account = value; }\n\n        /// &lt;summary&gt;\n        /// Event triggered when the account is loaded.\n        /// &lt;/summary&gt;\n        public UnityEvent Event_OnAccountLoad { get; set; } = new UnityEvent();\n\n        /// &lt;summary&gt;\n        /// Event triggered when the account data is changed.\n        /// &lt;/summary&gt;\n        public UnityEvent&lt;Account&gt; Event_OnAccountDataOnChanged { get; set; } = new UnityEvent&lt;Account&gt;();\n\n        /// &lt;summary&gt;\n        /// Event triggered when the user data is changed.\n        /// &lt;/summary&gt;\n        public UnityEvent&lt;UserData&gt; Event_OnUserDataOnChanged { get; set; } = new UnityEvent&lt;UserData&gt;();\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"AccountManager\"/&gt; class.\n        /// &lt;/summary&gt;\n        public AccountManager() { }\n\n        #endregion\n\n        #region Public Methods\n\n        /// &lt;summary&gt;\n        /// Logs in the user.\n        /// &lt;/summary&gt;\n        public void Login()\n        {\n            var request = new LoginRequest(new EmailLoginController_Playfab(account.Email, account.Password, PlayFabSettings.TitleId, true));\n            request.SendRequest(out string errorLog, OnGetLoginResponse_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Sends a password reset request.\n        /// &lt;/summary&gt;\n        public void PasswordResetRequest()\n        {\n            var request = new PasswordResetRequest(new PasswordResetController_Playfab(account.Email));\n            request.SendRequest(out string errorLog, OnGetPasswordResetResponse_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Registers a new user.\n        /// &lt;/summary&gt;\n        public void Register()\n        {\n            isRegisterProcess = true;\n            var request = new RegisterRequest(new RegisterController_Playfab(account.Email, account.Password, account.UserData.UserName));\n            request.SendRequest(out string errorLog, OnGetRegisterResponse_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Updates user statistics.\n        /// &lt;/summary&gt;\n        public void UpdateStatistics()\n        {\n            var request = new UpdateStatisticsRequest(new UpdateStatisticsController_Playfab(\n                                new (string name, int value)[] {\n                                    (nameof(account.UserData.Rank), account.UserData.Rank),\n                                    (nameof(account.UserData.Rating), account.UserData.Rating),\n                                    (nameof(account.UserData.LaunchCount), account.UserData.LaunchCount)\n                                }\n                            ));\n\n            request.SendRequest(out string errorLog, OnGetUpdateStatisticsResponse_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Updates account information in Azure Table.\n        /// &lt;/summary&gt;\n        public void UpdateAccountInfo_AzureTable()\n        {\n            var request = new UpdateStatisticsRequest(new UpdateAccountInfoOnAzureController_Playfab(account, \"AddNewAccount\"));\n            request.SendRequest(out string errorLog, OnGetUpdateAccountResponseAzure_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n            }\n        }\n\n        #endregion\n\n        #region Private Methods\n\n        private void ApplyStatistics(out bool isHasChanged, Dictionary&lt;string, int&gt; statistics)\n        {\n            isHasChanged = false;\n\n            if (statistics.ContainsKey(nameof(account.UserData.Rank)) &amp;&amp;\n                account.UserData.Rank != statistics[nameof(account.UserData.Rank)])\n            {\n                isHasChanged = true;\n                account.UserData.Rank = statistics[nameof(account.UserData.Rank)] &gt; account.UserData.Rank ? \n                    statistics[nameof(account.UserData.Rank)] : account.UserData.Rank;\n            }\n\n            if (statistics.ContainsKey(nameof(account.UserData.Rating)) &amp;&amp;\n                account.UserData.Rating != statistics[nameof(account.UserData.Rating)])\n            {\n                isHasChanged = true;\n                account.UserData.Rating = statistics[nameof(account.UserData.Rating)] &gt; account.UserData.Rating ? \n                    statistics[nameof(account.UserData.Rating)] : account.UserData.Rating;\n            }\n\n            if (statistics.ContainsKey(nameof(account.UserData.LaunchCount)) &amp;&amp;\n                account.UserData.LaunchCount != statistics[nameof(account.UserData.LaunchCount)])\n            {\n                isHasChanged = true;\n                account.UserData.LaunchCount = statistics[nameof(account.UserData.LaunchCount)] &gt; account.UserData.LaunchCount ? \n                    statistics[nameof(account.UserData.LaunchCount)] : account.UserData.LaunchCount;\n            }\n        }\n\n        private void FindAccountData()\n        {\n            var credentials = LoadAccountCredentials();\n            account.DeviceId = SystemInfo.deviceUniqueIdentifier;\n            if (credentials.isContain)\n            {\n                account.Email = credentials.email;\n                account.Password = credentials.password;\n                account.UserData = new UserData();\n                account.IsAccountLoaded = true;\n            }\n            else\n            {\n                account.IsAccountLoaded = false;\n            }\n\n            LoginOnStart();\n        }\n\n        private (bool isContain, string email, string password) LoadAccountCredentials()\n        {\n            if (PlayerPrefs.HasKey(\"userEmail\") &amp;&amp; PlayerPrefs.HasKey(\"userPassword\"))\n            {\n                string encryptedEmail = PlayerPrefs.GetString(\"userEmail\");\n                string encryptedPassword = PlayerPrefs.GetString(\"userPassword\");\n\n                string email = EncryptionUtility.Decrypt(encryptedEmail);\n                string password = EncryptionUtility.Decrypt(encryptedPassword);\n\n                return (true, email, password);\n            }\n\n            return (false, null, null);\n        }\n\n        private void SaveAccountCredentials(string email, string password)\n        {\n            string encryptedEmail = EncryptionUtility.Encrypt(email);\n            string encryptedPassword = EncryptionUtility.Encrypt(password);\n\n            PlayerPrefs.SetString(\"userEmail\", encryptedEmail);\n            PlayerPrefs.SetString(\"userPassword\", encryptedPassword);\n            PlayerPrefs.Save();\n        }\n\n        private void LoginOnStart()\n        {\n            if (account.IsAccountLoaded)\n            {\n                Login();\n                return;\n            }\n\n            var request = new LoginRequest(new DeviceLoginController_Playfab(account.DeviceId, PlayFabSettings.TitleId));\n            request.SendRequest(out string errorLog, OnGetLoginResponse_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n            }\n        }\n\n        private void LoadAccountInfo()\n        {\n            var request = new GetAccountInfoRequest(new GetAccountInfoController_Playfab(account.Email, account.Password, \"GetAccountInfo\"));\n            request.SendRequest(out string errorLog, OnGetAccountInfoResponse_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n            }\n        }\n\n        private void LoadPlayerStatistics()\n        {\n            var request = new GetStatisticsRequest(new GetPlayerStatisticsController_Playfab(\"Rank\", \"Rating\", \"LaunchCount\"));\n            request.SendRequest(out string errorLog, OnGetStatisticsResponse_EventListener);\n            if (errorLog.Length &gt; 0)\n            {\n                HFLogger.LogError(errorLog);\n                uiManager.alert.Show(\"Alert\", errorLog, Application.Quit);\n            }\n        }\n\n        #endregion\n\n        #region Event Handlers\n\n        private void OnGetLoginResponse_EventListener(ILoginResponse response)\n        {\n            account.IsAccountLoaded = response.IsAccountLogged;\n            account.PlayfabId = response.PlayFabId;\n\n            var ui = GameManager.Instance.GetManager&lt;UiManager&gt;();\n            if (ui.IsContain)\n            {\n                uiManager = ui.Instance;\n            }\n\n            if (response.IsRequestSuccess &amp;&amp; account.IsAccountLoaded)\n            {\n                account.IsAccountLoggedIn = true;\n                SaveAccountCredentials(account.Email, account.Password);\n                LoadAccountInfo();\n                return;\n            }\n\n            account.UserData.UserName = \"#\" + SystemInfo.deviceUniqueIdentifier[..4];\n\n            if (response.IsRequestSuccess)\n                LoadPlayerStatistics();\n\n            if (!response.IsRequestSuccess)\n            {\n                HFLogger.LogError(response, response.Message);\n                uiManager.alert.Show(\"Alert\", response.Message, Application.Quit);\n                return;\n            }\n\n\n            HFLogger.Log(response, response.Message);\n        }\n\n        private void OnGetAccountInfoResponse_EventListener(IAccountInfoResponse response)\n        {\n            account.UserData.IsLogin = response.IsRequestSuccess;\n            if (response.IsRequestSuccess)\n            {\n                account.UserData.UserName = response.UserName;\n                account.UserData.Rating = response.Rating;\n                account.UserData.LaunchCount = response.LaunchCount;\n            }\n            LoadPlayerStatistics();\n\n            if (!response.IsRequestSuccess)\n            {\n                HFLogger.LogError(response, response.Message);\n                uiManager.alert.Show(\"Alert\", response.Message, Application.Quit);\n                return;\n            }\n\n            HFLogger.Log(response, response.Message);\n        }\n\n        private void OnGetStatisticsResponse_EventListener(IGetStatisticsResponse response)\n        {\n            bool isHasChanged = false;\n            if (response.IsRequestSuccess)\n            {\n                ApplyStatistics(out isHasChanged, response.Statistics);\n            }\n\n            if (isHasChanged || isStartProcess || isRegisterProcess)\n            {\n                if (isStartProcess)\n                {\n                    account.UserData.LaunchCount++;\n                }\n\n                UpdateStatistics();\n\n                if (account.IsAccountLoaded)\n                {\n                    UpdateAccountInfo_AzureTable();\n                }\n            }\n\n            if (!response.IsRequestSuccess)\n            {\n                HFLogger.LogError(response, response.Message);\n                return;\n            }\n\n            Event_OnAccountDataOnChanged.Invoke(account);\n\n            HFLogger.Log(response, response.Message);\n        }\n\n        private void OnGetUpdateStatisticsResponse_EventListener(IUpdateStatisticsResponse response)\n        {\n            if (isStartProcess)\n            {\n                isStartProcess = false;\n                GameManager.Instance.LoadMainMenuScene();\n            }\n\n            Event_OnUserDataOnChanged.Invoke(account.UserData);\n\n            if (!response.IsRequestSuccess)\n            {\n                HFLogger.LogError(response, response.Message);\n                return;\n            }\n\n            HFLogger.Log(response, response.Message);\n        }\n\n        private void OnGetUpdateAccountResponseAzure_EventListener(IUpdateStatisticsResponse response)\n        {\n            account.IsAccountLoaded = true;\n            account.IsAccountLoggedIn = true;\n            account.UserData.IsLogin = true;\n\n            if (isRegisterProcess) isRegisterProcess = false;\n            Event_OnAccountDataOnChanged.Invoke(account);\n\n            if (!response.IsRequestSuccess)\n            {\n                HFLogger.LogError(response, response.Message);\n                return;\n            }\n\n            HFLogger.Log(response, response.Message);\n        }\n\n        private void OnGetRegisterResponse_EventListener(IRegisterResponse response)\n        {\n            if (response.IsRequestSuccess) account.IsAccountLoaded = true;\n\n            HFLogger.LogError(response, response.Message);\n            uiManager.alert.Show(\"Alert\", response.Message);\n            SaveAccountCredentials(account.Email, account.Password);\n            LoadPlayerStatistics();\n            Login();\n        }\n\n        private void OnGetPasswordResetResponse_EventListener(IPasswordResetResponse response)\n        {\n            uiManager.alert.Show(\"Alert\", response.Message);\n        }\n\n        #endregion\n\n        #region Initializers\n\n        /// &lt;summary&gt;\n        /// Called on the first frame the script is active.\n        /// &lt;/summary&gt;\n        private void Start()\n        {\n            isStartProcess = true;\n            GameManager.Instance.SetManager(this);\n            FindAccountData();\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"AccountManager/#fields","title":"Fields","text":"<ul> <li>account: An instance of the <code>Account</code> class representing the current account.</li> <li>uiManager: An instance of the <code>UiManager</code> class.</li> <li>isRegisterProcess: A boolean indicating if the registration process is ongoing.</li> <li>isStartProcess: A boolean indicating if the start process is ongoing.</li> </ul>"},{"location":"AccountManager/#properties","title":"Properties","text":"<ul> <li>Account: Gets or sets the current account.</li> <li>Event_OnAccountLoad: Event triggered when the account is loaded.</li> <li>Event_OnAccountDataOnChanged: Event triggered when the account data is changed.</li> <li>Event_OnUserDataOnChanged: Event triggered when the user data is changed.</li> </ul>"},{"location":"AccountManager/#methods","title":"Methods","text":""},{"location":"AccountManager/#public-methods","title":"Public Methods","text":"<ul> <li>Login(): Logs in the user.</li> <li>PasswordResetRequest(): Sends a password reset request.</li> <li>Register(): Registers a new user.</li> <li>UpdateStatistics(): Updates user statistics.</li> <li>UpdateAccountInfo_AzureTable(): Updates account information in Azure Table.</li> </ul>"},{"location":"AccountManager/#private-methods","title":"Private Methods","text":"<ul> <li>ApplyStatistics(out bool isHasChanged, Dictionary statistics): Applies the retrieved statistics to the account. <li>FindAccountData(): Finds account data.</li> <li>LoadAccountCredentials(): Loads account credentials from PlayerPrefs.</li> <li>SaveAccountCredentials(string email, string password): Saves account credentials to PlayerPrefs.</li> <li>LoginOnStart(): Logs in the user on start.</li> <li>LoadAccountInfo(): Loads account information.</li> <li>LoadPlayerStatistics(): Loads player statistics.</li>"},{"location":"AccountManager/#event-handlers","title":"Event Handlers","text":"<ul> <li>OnGetLoginResponse_EventListener(ILoginResponse response): Handles the login response event.</li> <li>OnGetAccountInfoResponse_EventListener(IAccountInfoResponse response): Handles the account information response event.</li> <li>OnGetStatisticsResponse_EventListener(IGetStatisticsResponse response): Handles the statistics response event.</li> <li>OnGetUpdateStatisticsResponse_EventListener(IUpdateStatisticsResponse response): Handles the update statistics response event.</li> <li>OnGetUpdateAccountResponseAzure_EventListener(IUpdateStatisticsResponse response): Handles the update account response for Azure event.</li> <li>OnGetRegisterResponse_EventListener(IRegisterResponse response): Handles the register response event.</li> <li>OnGetPasswordResetResponse_EventListener(IPasswordResetResponse response): Handles the password reset response event.</li> </ul>"},{"location":"AccountManager/#initializers","title":"Initializers","text":"<ul> <li>Start(): Called on the first frame the script is active.</li> </ul>"},{"location":"AccountManager/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>AccountManager</code> class in a Unity project.</p> <pre><code>using UnityEngine;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        AccountManager.Instance.Login();\n    }\n}\n</code></pre>"},{"location":"AccountManager/#see-also","title":"See Also","text":"<p>For more information on the <code>IAccountManager</code> interface, refer to the IAccountManager documentation.</p>"},{"location":"AccountManager/#file-location","title":"File Location","text":"<p>This class is defined in the <code>AccountManager.cs</code> file, located in the <code>flameborn.Core.Managers</code> namespace.</p>"},{"location":"AzureManager/","title":"AzureManager Class Documentation","text":""},{"location":"AzureManager/#overview","title":"Overview","text":"<p>The <code>AzureManager</code> class manages Azure configurations within the Flameborn SDK. This class is a singleton derived from <code>MonoBehaviourSingleton</code> and implements the <code>IManager</code> interface.</p>"},{"location":"AzureManager/#class-definition","title":"Class Definition","text":"<pre><code>using flameborn.Core.Managers;\nusing flameborn.Core.Managers.Abstract;\nusing flameborn.Sdk.Configurations;\nusing HF.Library.Utilities.Singleton;\nusing HF.Logger;\n\nnamespace flameborn.Sdk.Managers\n{\n    /// &lt;summary&gt;\n    /// Manager for handling Azure configurations.\n    /// &lt;/summary&gt;\n    public class AzureManager : MonoBehaviourSingleton&lt;AzureManager&gt;, IManager\n    {\n        #region Fields\n\n        private AzureConfiguration configuration;\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Called on the first frame the script is active.\n        /// &lt;/summary&gt;\n        private void Start()\n        {\n            GameManager.Instance.SetManager(this);\n            FindConfiguration();\n        }\n\n        /// &lt;summary&gt;\n        /// Attempts to find and load the Azure configuration.\n        /// &lt;/summary&gt;\n        private void FindConfiguration()\n        {\n            HFLogger.Log(this, $\"{nameof(FindConfiguration)} invoked.\");\n            var manager = GameManager.Instance.GetManager&lt;ConfigurationManager&gt;();\n            if (manager.IsContain)\n            {\n                manager.Instance.LoadConfiguration&lt;AzureConfiguration&gt;(SetConfiguration);\n                return;\n            }\n\n            Invoke(nameof(FindConfiguration), 2f);\n        }\n\n        /// &lt;summary&gt;\n        /// Sets the Azure configuration.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"azureConfiguration\"&gt;The Azure configuration to set.&lt;/param&gt;\n        private void SetConfiguration(AzureConfiguration azureConfiguration)\n        {\n            configuration = azureConfiguration;\n            HFLogger.Log(this, $\"{azureConfiguration.GetType().Name} configuration file saved with {nameof(SetConfiguration)} function.\");\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"AzureManager/#fields","title":"Fields","text":"<ul> <li>configuration: An instance of the <code>AzureConfiguration</code> class representing the Azure configuration.</li> </ul>"},{"location":"AzureManager/#methods","title":"Methods","text":""},{"location":"AzureManager/#public-methods","title":"Public Methods","text":"<ul> <li>Start(): Called on the first frame the script is active. Sets the manager and attempts to find the Azure configuration.</li> </ul>"},{"location":"AzureManager/#private-methods","title":"Private Methods","text":"<ul> <li>FindConfiguration(): Attempts to find and load the Azure configuration. Logs the attempt and retries if the configuration manager is not found.</li> <li>SetConfiguration(AzureConfiguration azureConfiguration): Sets the Azure configuration and logs the success.</li> </ul>"},{"location":"AzureManager/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>AzureManager</code> class in a Unity project.</p> <pre><code>using UnityEngine;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        AzureManager.Instance.FindConfiguration();\n    }\n}\n</code></pre>"},{"location":"AzureManager/#see-also","title":"See Also","text":"<p>For more information on the <code>IManager</code> interface, refer to the IManager documentation.</p>"},{"location":"AzureManager/#file-location","title":"File Location","text":"<p>This class is defined in the <code>AzureManager.cs</code> file, located in the <code>flameborn.Sdk.Managers</code> namespace.</p>"},{"location":"BoxGroupAttribute/","title":"BoxGroupAttribute Class Documentation","text":""},{"location":"BoxGroupAttribute/#overview","title":"Overview","text":"<p>The <code>BoxGroupAttribute</code> class is a custom attribute used to group properties within the Flameborn SDK. This attribute is derived from the <code>PropertyGroupAttribute</code> class provided by the Odin Inspector library. It allows grouping properties with a label and options to show and center the label.</p>"},{"location":"BoxGroupAttribute/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing Sirenix.OdinInspector;\n\nnamespace flameborn.Core.Attributes\n{\n    /// &lt;summary&gt;\n    /// Custom attribute to group properties with a label and options to show and center the label.\n    /// &lt;/summary&gt;\n    [AttributeUsage(AttributeTargets.All, AllowMultiple = false, Inherited = true)]\n    public class BoxGroupAttribute : PropertyGroupAttribute\n    {\n        #region Properties\n\n        /// &lt;summary&gt;\n        /// Gets the label of the box group.\n        /// &lt;/summary&gt;\n        public string Label { get; private set; }\n\n        /// &lt;summary&gt;\n        /// Gets a value indicating whether the label should be shown.\n        /// &lt;/summary&gt;\n        public bool ShowLabel { get; private set; }\n\n        /// &lt;summary&gt;\n        /// Gets a value indicating whether the label should be centered.\n        /// &lt;/summary&gt;\n        public bool CenterLabel { get; private set; }\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"BoxGroupAttribute\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"group\"&gt;The label of the group.&lt;/param&gt;\n        /// &lt;param name=\"showLabel\"&gt;Indicates whether the label should be shown. Default is true.&lt;/param&gt;\n        /// &lt;param name=\"centerLabel\"&gt;Indicates whether the label should be centered. Default is false.&lt;/param&gt;\n        /// &lt;param name=\"order\"&gt;The order of the group. Default is 0.&lt;/param&gt;\n        public BoxGroupAttribute(string group, bool showLabel = true, bool centerLabel = false, float order = 0)\n            : base(group, order)\n        {\n            this.Label = group;\n            this.ShowLabel = showLabel;\n            this.CenterLabel = centerLabel;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Combines the values with another &lt;see cref=\"PropertyGroupAttribute\"/&gt; instance.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"other\"&gt;The other &lt;see cref=\"PropertyGroupAttribute\"/&gt; instance.&lt;/param&gt;\n        protected override void CombineValuesWith(PropertyGroupAttribute other)\n        {\n            var attr = other as BoxGroupAttribute;\n\n            if (this.Label == null)\n            {\n                this.Label = attr.Label;\n            }\n\n            this.ShowLabel |= attr.ShowLabel;\n            this.CenterLabel |= attr.CenterLabel;\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"BoxGroupAttribute/#properties","title":"Properties","text":"<ul> <li>Label: Gets the label of the box group.</li> <li>ShowLabel: Gets a value indicating whether the label should be shown.</li> <li>CenterLabel: Gets a value indicating whether the label should be centered.</li> </ul>"},{"location":"BoxGroupAttribute/#methods","title":"Methods","text":""},{"location":"BoxGroupAttribute/#public-methods","title":"Public Methods","text":"<ul> <li>BoxGroupAttribute(string group, bool showLabel = true, bool centerLabel = false, float order = 0): Initializes a new instance of the <code>BoxGroupAttribute</code> class.</li> <li>Parameters:<ul> <li>group: The label of the group.</li> <li>showLabel: Indicates whether the label should be shown. Default is true.</li> <li>centerLabel: Indicates whether the label should be centered. Default is false.</li> <li>order: The order of the group. Default is 0.</li> </ul> </li> </ul>"},{"location":"BoxGroupAttribute/#protected-methods","title":"Protected Methods","text":"<ul> <li>CombineValuesWith(PropertyGroupAttribute other): Combines the values with another <code>PropertyGroupAttribute</code> instance.</li> <li>Parameters:<ul> <li>other: The other <code>PropertyGroupAttribute</code> instance.</li> </ul> </li> </ul>"},{"location":"BoxGroupAttribute/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>BoxGroupAttribute</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Core.Attributes;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    [BoxGroup(\"Group A\")]\n    public int valueA;\n\n    [BoxGroup(\"Group B\", showLabel: false)]\n    public int valueB;\n\n    [BoxGroup(\"Group C\", centerLabel: true)]\n    public int valueC;\n}\n</code></pre>"},{"location":"BoxGroupAttribute/#see-also","title":"See Also","text":"<p>For more information on the <code>PropertyGroupAttribute</code> class, refer to the PropertyGroupAttribute documentation.</p>"},{"location":"BoxGroupAttribute/#file-location","title":"File Location","text":"<p>This class is defined in the <code>BoxGroupAttribute.cs</code> file, located in the <code>flameborn.Core.Attributes</code> namespace.</p>"},{"location":"ConfigurationManager/","title":"ConfigurationManager Class Documentation","text":""},{"location":"ConfigurationManager/#overview","title":"Overview","text":"<p>The <code>ConfigurationManager</code> class handles various configurations within the Flameborn SDK. This class is a singleton derived from <code>MonoBehaviourSingleton</code> and implements the <code>IConfigurationManager</code> and <code>IConfigurationLoader</code> interfaces.</p>"},{"location":"ConfigurationManager/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Core.Managers;\nusing flameborn.Sdk.Configurations.Abstract;\nusing flameborn.Sdk.Managers.Abstract;\nusing HF.Library.Utilities.Singleton;\nusing HF.Logger;\nusing Newtonsoft.Json;\nusing Sirenix.Utilities;\nusing UnityEngine;\n\nnamespace flameborn.Sdk.Managers\n{\n    /// &lt;summary&gt;\n    /// Manager for handling configurations.\n    /// &lt;/summary&gt;\n    [Serializable]\n    public class ConfigurationManager : MonoBehaviourSingleton&lt;ConfigurationManager&gt;, IConfigurationManager, IConfigurationLoader\n    {\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Called on the first frame the script is active.\n        /// &lt;/summary&gt;\n        private void Start()\n        {\n            GameManager.Instance.SetManager(this);\n        }\n\n        /// &lt;summary&gt;\n        /// Loads the configuration of type &lt;typeparamref name=\"T\"/&gt;.\n        /// &lt;/summary&gt;\n        /// &lt;typeparam name=\"T\"&gt;The type of configuration to load.&lt;/typeparam&gt;\n        /// &lt;param name=\"processListeners\"&gt;The listeners to process the configuration.&lt;/param&gt;\n        public void LoadConfiguration&lt;T&gt;(params Action&lt;T&gt;[] processListeners) where T : IConfiguration\n        {\n            var json = Resources.Load&lt;TextAsset&gt;(typeof(T).Name)?.ToString();\n\n            if (string.IsNullOrEmpty(json)) return;\n\n            var configuration = JsonConvert.DeserializeObject&lt;T&gt;(json);\n\n            processListeners?.ForEach(a =&gt; a.Invoke(configuration));\n            HFLogger.Log(this, $\"{nameof(LoadConfiguration)} configuration load.\");\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"ConfigurationManager/#methods","title":"Methods","text":""},{"location":"ConfigurationManager/#public-methods","title":"Public Methods","text":"<ul> <li> <p>Start(): Called on the first frame the script is active. Sets the manager.</p> </li> <li> <p>LoadConfiguration(params Action[] processListeners): Loads the configuration of type <code>T</code>.  <li>Parameters:<ul> <li>T: The type of configuration to load.</li> <li>processListeners: The listeners to process the configuration.</li> </ul> </li>"},{"location":"ConfigurationManager/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>ConfigurationManager</code> class in a Unity project.</p> <pre><code>using UnityEngine;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        ConfigurationManager.Instance.LoadConfiguration&lt;MyConfiguration&gt;(config =&gt;\n        {\n            Debug.Log(\"Configuration Loaded: \" + config.SomeProperty);\n        });\n    }\n}\n</code></pre>"},{"location":"ConfigurationManager/#see-also","title":"See Also","text":"<p>For more information on the <code>IConfigurationManager</code> interface, refer to the IConfigurationManager documentation.</p> <p>For more information on the <code>IConfigurationLoader</code> interface, refer to the IConfigurationLoader documentation.</p>"},{"location":"ConfigurationManager/#file-location","title":"File Location","text":"<p>This class is defined in the <code>ConfigurationManager.cs</code> file, located in the <code>flameborn.Sdk.Managers</code> namespace.</p>"},{"location":"Controller/","title":"Controller Class Documentation","text":""},{"location":"Controller/#overview","title":"Overview","text":"<p>The <code>Controller</code> class is an abstract base class for API controllers within the Flameborn SDK. This class defines the structure for sending API requests and handling responses of a specified type. </p>"},{"location":"Controller/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Abstract;\n\nnamespace flameborn.Sdk.Controllers\n{\n    /// &lt;summary&gt;\n    /// Abstract base class for API controllers.\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=\"T\"&gt;The type of response managed by the controller.&lt;/typeparam&gt;\n    public abstract class Controller&lt;T&gt; : IApiController&lt;T&gt; where T : IApiResponse\n    {\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"Controller{T}\"/&gt; class.\n        /// &lt;/summary&gt;\n        protected Controller()\n        {\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the API request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public abstract void SendRequest(out string errorLog, params Action&lt;T&gt;[] listeners);\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"Controller/#methods","title":"Methods","text":""},{"location":"Controller/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the API request. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"Controller/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to extend the <code>Controller</code> class in a concrete implementation.</p> <pre><code>using System;\nusing flameborn.Sdk.Controllers;\nusing flameborn.Sdk.Requests.Abstract;\n\npublic class MyApiController : Controller&lt;MyApiResponse&gt;\n{\n    public override void SendRequest(out string errorLog, params Action&lt;MyApiResponse&gt;[] listeners)\n    {\n        errorLog = string.Empty;\n        // Implementation of sending the request and processing the response\n    }\n}\n\npublic class MyApiResponse : IApiResponse\n{\n    // Implementation of the response\n}\n</code></pre>"},{"location":"Controller/#see-also","title":"See Also","text":"<p>For more information on the <code>IApiController</code> interface, refer to the IApiController documentation.</p>"},{"location":"Controller/#file-location","title":"File Location","text":"<p>This class is defined in the <code>Controller.cs</code> file, located in the <code>flameborn.Sdk.Controllers</code> namespace.</p>"},{"location":"CreateMatchTicketController_Playfab/","title":"CreateMatchTicketController_Playfab Class Documentation","text":""},{"location":"CreateMatchTicketController_Playfab/#overview","title":"Overview","text":"<p>The <code>CreateMatchTicketController_Playfab</code> class manages the creation of match tickets via PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;ICreateMatchTicketResponse&gt;</code> class and implements the <code>IApiController&lt;ICreateMatchTicketResponse&gt;</code> interface.</p>"},{"location":"CreateMatchTicketController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Core.User;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.MatchMaking.Abstract;\nusing flameborn.Sdk.Requests.MatchMaking.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.MultiplayerModels;\n\nnamespace flameborn.Sdk.Controllers.MatchMaking\n{\n    /// &lt;summary&gt;\n    /// Controller for creating a match ticket via PlayFab.\n    /// &lt;/summary&gt;\n    [Serializable]\n    public class CreateMatchTicketController_Playfab : Controller&lt;ICreateMatchTicketResponse&gt;, IApiController&lt;ICreateMatchTicketResponse&gt;\n    {\n        #region Fields\n\n        private string queueName;\n        private UserData userData;\n        private event Action&lt;ICreateMatchTicketResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"CreateMatchTicketController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"queue\"&gt;The name of the queue.&lt;/param&gt;\n        /// &lt;param name=\"user\"&gt;The user data for the player creating the ticket.&lt;/param&gt;\n        public CreateMatchTicketController_Playfab(string queue, UserData user)\n        {\n            queueName = queue;\n            userData = user;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to create a match ticket.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;ICreateMatchTicketResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n\n            if (string.IsNullOrEmpty(queueName)) \n            { \n                errorLog = $\"{nameof(queueName)} is null or empty.\"; \n            }\n            if (userData.IsNull()) \n            { \n                errorLog = $\"{nameof(userData)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n\n            var request = TakeRequest();\n            PlayFabMultiplayerAPI.CreateMatchmakingTicket(request, OnCreatedMatchTicket_EventListener_Playfab, OnError);\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for creating a match ticket.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to create a match ticket.&lt;/returns&gt;\n        private CreateMatchmakingTicketRequest TakeRequest()\n        {\n            return new CreateMatchmakingTicketRequest\n            {\n                QueueName = queueName,\n                GiveUpAfterSeconds = 30,\n                Creator = new MatchmakingPlayer\n                {\n                    Entity = new EntityKey\n                    {\n                        Id = PlayFabSettings.staticPlayer.EntityId,\n                        Type = PlayFabSettings.staticPlayer.EntityType\n                    },\n                    Attributes = new MatchmakingPlayerAttributes\n                    {\n                        DataObject = new PlayerData\n                        (\n                            PlayFabSettings.staticPlayer.PlayFabId,\n                            userData.UserName,\n                            userData.Rating.ToString(),\n                            userData.Rank.ToString()\n                        )\n                    }\n                }\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the match ticket creation result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the match ticket creation request.&lt;/param&gt;\n        private void OnCreatedMatchTicket_EventListener_Playfab(CreateMatchmakingTicketResult result)\n        {\n            var response = new CreateMatchTicketResponse();\n            response.IsRequestSuccess = !string.IsNullOrEmpty(result.TicketId);\n\n            if (response.IsRequestSuccess)\n            {\n                response.SetResponse(true, result.TicketId, result, \"New ticket saved.\");\n            }\n            else\n            {\n                response.Message = \"Match ticket creation failed.\";\n            }\n\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the match ticket creation request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new CreateMatchTicketResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"CreateMatchTicketController_Playfab/#fields","title":"Fields","text":"<ul> <li>queueName: The name of the queue.</li> <li>userData: The user data for the player creating the ticket.</li> </ul>"},{"location":"CreateMatchTicketController_Playfab/#methods","title":"Methods","text":""},{"location":"CreateMatchTicketController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to create a match ticket via PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"CreateMatchTicketController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for creating a match ticket.</li> <li>OnCreatedMatchTicket_EventListener_Playfab(CreateMatchmakingTicketResult result): Handles the event when the match ticket creation result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"CreateMatchTicketController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>CreateMatchTicketController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.MatchMaking;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var userData = new UserData { UserName = \"Player1\", Rating = 100, Rank = 1 };\n        var controller = new CreateMatchTicketController_Playfab(\"queue-name\", userData);\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Match ticket created: \" + response.TicketId);\n            }\n            else\n            {\n                Debug.LogError(\"Failed to create match ticket: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"CreateMatchTicketController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>ICreateMatchTicketResponse</code> interface, refer to the ICreateMatchTicketResponse documentation.</p>"},{"location":"CreateMatchTicketController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>CreateMatchTicketController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.MatchMaking</code> namespace.</p>"},{"location":"CreateMatchTicketRequest/","title":"CreateMatchTicketRequest Class Documentation","text":""},{"location":"CreateMatchTicketRequest/#overview","title":"Overview","text":"<p>The <code>CreateMatchTicketRequest</code> class represents a request to create a match ticket in the Flameborn SDK. This class extends <code>Request&lt;ICreateMatchTicketResponse&gt;</code> and implements the <code>IApiRequest&lt;ICreateMatchTicketResponse&gt;</code> interface.</p>"},{"location":"CreateMatchTicketRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking\n</code></pre>"},{"location":"CreateMatchTicketRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;ICreateMatchTicketResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;ICreateMatchTicketResponse&gt;</code></li> </ul>"},{"location":"CreateMatchTicketRequest/#constructors","title":"Constructors","text":""},{"location":"CreateMatchTicketRequest/#creatematchticketrequestiapicontrollericreatematchticketresponse-controller","title":"<code>CreateMatchTicketRequest(IApiController&lt;ICreateMatchTicketResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>CreateMatchTicketRequest</code> class.</p>"},{"location":"CreateMatchTicketRequest/#syntax","title":"Syntax","text":"<pre><code>public CreateMatchTicketRequest(IApiController&lt;ICreateMatchTicketResponse&gt; controller)\n</code></pre>"},{"location":"CreateMatchTicketRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;ICreateMatchTicketResponse&gt;</code> - The API controller for the request.</li> </ul>"},{"location":"CreateMatchTicketRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;ICreateMatchTicketResponse&gt; controller = new CreateMatchTicketController();\nCreateMatchTicketRequest createMatchTicketRequest = new CreateMatchTicketRequest(controller);\n</code></pre>"},{"location":"CreateMatchTicketRequest/#methods","title":"Methods","text":""},{"location":"CreateMatchTicketRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to create a match ticket.</p>"},{"location":"CreateMatchTicketRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;ICreateMatchTicketResponse&gt;[] listeners);\n</code></pre>"},{"location":"CreateMatchTicketRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;ICreateMatchTicketResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"CreateMatchTicketRequest/#example_1","title":"Example","text":"<pre><code>createMatchTicketRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"CreateMatchTicketRequest/#references","title":"References","text":"<ul> <li>ICreateMatchTicketResponse</li> <li>IApiController</li> </ul>"},{"location":"CreateMatchTicketResponse/","title":"CreateMatchTicketResponse Class Documentation","text":""},{"location":"CreateMatchTicketResponse/#overview","title":"Overview","text":"<p>The <code>CreateMatchTicketResponse</code> class represents a response for creating a match ticket in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>ICreateMatchTicketResponse</code> interface.</p>"},{"location":"CreateMatchTicketResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking.Entity\n</code></pre>"},{"location":"CreateMatchTicketResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>ICreateMatchTicketResponse</code></li> </ul>"},{"location":"CreateMatchTicketResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"CreateMatchTicketResponse/#properties","title":"Properties","text":""},{"location":"CreateMatchTicketResponse/#ticketid","title":"<code>TicketId</code>","text":"<p>Gets or sets the ticket ID of the created match ticket.</p>"},{"location":"CreateMatchTicketResponse/#syntax","title":"Syntax","text":"<pre><code>public string TicketId { get; set; }\n</code></pre>"},{"location":"CreateMatchTicketResponse/#methods","title":"Methods","text":""},{"location":"CreateMatchTicketResponse/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"CreateMatchTicketResponse/#syntax_1","title":"Syntax","text":"<pre><code>public void SetResponse&lt;T&gt;(bool isSuccess, string ticketId, T response, string message = \"\");\n</code></pre>"},{"location":"CreateMatchTicketResponse/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>ticketId: <code>string</code> - The ticket ID of the created match ticket.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"CreateMatchTicketResponse/#example","title":"Example","text":"<pre><code>CreateMatchTicketResponse createMatchTicketResponse = new CreateMatchTicketResponse();\ncreateMatchTicketResponse.SetResponse(true, \"Ticket123\", new object(), \"Success\");\n// Use createMatchTicketResponse in your logic\n</code></pre>"},{"location":"CreateMatchTicketResponse/#references","title":"References","text":"<ul> <li>ICreateMatchTicketResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"DataPanelBase/","title":"DataPanelBase.cs Documentation","text":""},{"location":"DataPanelBase/#overview","title":"Overview","text":"<p><code>DataPanelBase&lt;T&gt;</code> is an abstract class that serves as a base for data panels managing data of a specific type. It provides methods to handle data changes and initialize the panel with data.</p>"},{"location":"DataPanelBase/#public-methods","title":"Public Methods","text":"Method Name Description Parameters Return Type <code>EventListener_OnDataHasChanged(T values)</code> Event listener for when data has changed. <code>T values</code> <code>void</code> <code>Init(T value)</code> Initializes the panel with the specified data. <code>T value</code> <code>void</code>"},{"location":"DataPanelBase/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleDataPanel : DataPanelBase&lt;MyDataType&gt;\n{\n    public override void EventListener_OnDataHasChanged(MyDataType values)\n    {\n        // Handle data change\n    }\n\n    public override void Init(MyDataType value)\n    {\n        // Initialize with data\n    }\n}\n</code></pre>"},{"location":"DeviceLoginController_Playfab/","title":"DeviceLoginController_Playfab Class Documentation","text":""},{"location":"DeviceLoginController_Playfab/#overview","title":"Overview","text":"<p>The <code>DeviceLoginController_Playfab</code> class manages logging in with a device ID on PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;ILoginResponse&gt;</code> class and implements the <code>IApiController&lt;ILoginResponse&gt;</code> interface.</p>"},{"location":"DeviceLoginController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Login.Abstract;\nusing flameborn.Sdk.Requests.Login.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.ClientModels;\n\nnamespace flameborn.Sdk.Controllers.Login\n{\n    /// &lt;summary&gt;\n    /// Controller for logging in with a device ID on PlayFab.\n    /// &lt;/summary&gt;\n    public class DeviceLoginController_Playfab : Controller&lt;ILoginResponse&gt;, IApiController&lt;ILoginResponse&gt;\n    {\n        #region Fields\n\n        private string deviceId;\n        private string titleId;\n        private event Action&lt;ILoginResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"DeviceLoginController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"deviceId\"&gt;The device ID for the login request.&lt;/param&gt;\n        /// &lt;param name=\"titleId\"&gt;The title ID for the login request.&lt;/param&gt;\n        public DeviceLoginController_Playfab(string deviceId, string titleId)\n        {\n            this.deviceId = deviceId;\n            this.titleId = titleId;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to log in with a device ID.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;ILoginResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (string.IsNullOrEmpty(deviceId)) \n            { \n                errorLog = $\"{nameof(deviceId)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(titleId)) \n            { \n                errorLog = $\"{nameof(titleId)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n\n#if UNITY_ANDROID\n            var androidReq = TakeRequestAndroid();\n            PlayFabClientAPI.LoginWithAndroidDeviceID(androidReq, OnGetLoginResult_EventListener, OnError);\n#endif\n#if UNITY_IOS\n            var iosReq = TakeRequestIOS();\n            PlayFabClientAPI.LoginWithIOSDeviceID(iosReq, OnGetLoginResult_EventListener, OnError);\n#endif\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for logging in with an Android device ID.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to log in with an Android device ID.&lt;/returns&gt;\n        private LoginWithAndroidDeviceIDRequest TakeRequestAndroid()\n        {\n            return new LoginWithAndroidDeviceIDRequest\n            {\n                AndroidDeviceId = deviceId,\n                CreateAccount = true\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for logging in with an iOS device ID.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to log in with an iOS device ID.&lt;/returns&gt;\n        private LoginWithIOSDeviceIDRequest TakeRequestIOS()\n        {\n            return new LoginWithIOSDeviceIDRequest\n            {\n                DeviceId = deviceId,\n                CreateAccount = true\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the login result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the login request.&lt;/param&gt;\n        private void OnGetLoginResult_EventListener(LoginResult result)\n        {\n            var response = new LoginResponse();\n            response.SetResponse(true, false, result.NewlyCreated, result.PlayFabId, result, \"Login succeed.\");\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the login request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new LoginResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"DeviceLoginController_Playfab/#fields","title":"Fields","text":"<ul> <li>deviceId: The device ID for the login request.</li> <li>titleId: The title ID for the login request.</li> </ul>"},{"location":"DeviceLoginController_Playfab/#methods","title":"Methods","text":""},{"location":"DeviceLoginController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to log in with a device ID on PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"DeviceLoginController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequestAndroid(): Constructs the request for logging in with an Android device ID.</li> <li>TakeRequestIOS(): Constructs the request for logging in with an iOS device ID.</li> <li>OnGetLoginResult_EventListener(LoginResult result): Handles the event when the login result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"DeviceLoginController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>DeviceLoginController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.Login;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new DeviceLoginController_Playfab(\"device-id\", \"title-id\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Login succeeded.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to log in: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"DeviceLoginController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>ILoginResponse</code> interface, refer to the ILoginResponse documentation.</p>"},{"location":"DeviceLoginController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>DeviceLoginController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Login</code> namespace.</p>"},{"location":"EmailLoginController_Playfab/","title":"EmailLoginController_Playfab Class Documentation","text":""},{"location":"EmailLoginController_Playfab/#overview","title":"Overview","text":"<p>The <code>EmailLoginController_Playfab</code> class manages logging in with an email address on PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;ILoginResponse&gt;</code> class and implements the <code>IApiController&lt;ILoginResponse&gt;</code> interface.</p>"},{"location":"EmailLoginController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Login.Abstract;\nusing flameborn.Sdk.Requests.Login.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.ClientModels;\n\nnamespace flameborn.Sdk.Controllers.Login\n{\n    /// &lt;summary&gt;\n    /// Controller for logging in with an email address on PlayFab.\n    /// &lt;/summary&gt;\n    public class EmailLoginController_Playfab : Controller&lt;ILoginResponse&gt;, IApiController&lt;ILoginResponse&gt;\n    {\n        #region Fields\n\n        private string email;\n        private string password;\n        private string titleId;\n        private bool isCombined;\n        private event Action&lt;ILoginResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"EmailLoginController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"email\"&gt;The email address for the login request.&lt;/param&gt;\n        /// &lt;param name=\"password\"&gt;The password for the login request.&lt;/param&gt;\n        /// &lt;param name=\"titleId\"&gt;The title ID for the login request.&lt;/param&gt;\n        /// &lt;param name=\"isCombined\"&gt;Whether to combine user account information in the request.&lt;/param&gt;\n        public EmailLoginController_Playfab(string email, string password, string titleId, bool isCombined = true)\n        {\n            this.email = email;\n            this.password = password;\n            this.titleId = titleId;\n            this.isCombined = isCombined;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to log in with an email address.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;ILoginResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (string.IsNullOrEmpty(email)) \n            { \n                errorLog = $\"{nameof(email)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(password) || password.Length &lt; 6) \n            { \n                errorLog = $\"{nameof(password)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(titleId)) \n            { \n                errorLog = $\"{nameof(titleId)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n            var request = TakeRequest();\n            PlayFabClientAPI.LoginWithEmailAddress(request, OnGetLoginResult_EventListener, OnError);\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for logging in with an email address.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to log in with an email address.&lt;/returns&gt;\n        private LoginWithEmailAddressRequest TakeRequest()\n        {\n            return new LoginWithEmailAddressRequest\n            {\n                Email = email,\n                Password = password,\n                TitleId = titleId,\n                InfoRequestParameters = new GetPlayerCombinedInfoRequestParams\n                {\n                    GetUserAccountInfo = isCombined\n                }\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the login result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the login request.&lt;/param&gt;\n        private void OnGetLoginResult_EventListener(LoginResult result)\n        {\n            var response = new LoginResponse();\n            response.SetResponse(true, true, result.NewlyCreated, result.PlayFabId, result, \"Login succeed.\");\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the login request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new LoginResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"EmailLoginController_Playfab/#fields","title":"Fields","text":"<ul> <li>email: The email address for the login request.</li> <li>password: The password for the login request.</li> <li>titleId: The title ID for the login request.</li> <li>isCombined: Whether to combine user account information in the request.</li> </ul>"},{"location":"EmailLoginController_Playfab/#methods","title":"Methods","text":""},{"location":"EmailLoginController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to log in with an email address on PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"EmailLoginController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for logging in with an email address.</li> <li>OnGetLoginResult_EventListener(LoginResult result): Handles the event when the login result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"EmailLoginController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>EmailLoginController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.Login;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new EmailLoginController_Playfab(\"example@example.com\", \"password123\", \"title-id\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Login succeeded.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to log in: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"EmailLoginController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>ILoginResponse</code> interface, refer to the ILoginResponse documentation.</p>"},{"location":"EmailLoginController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>EmailLoginController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Login</code> namespace.</p>"},{"location":"FindMatchController_Playfab/","title":"FindMatchController_Playfab Class Documentation","text":""},{"location":"FindMatchController_Playfab/#overview","title":"Overview","text":"<p>The <code>FindMatchController_Playfab</code> class manages finding a match via PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IFindMatchResponse&gt;</code> class and implements the <code>IApiController&lt;IFindMatchResponse&gt;</code> interface.</p>"},{"location":"FindMatchController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.MatchMaking.Abstract;\nusing flameborn.Sdk.Requests.MatchMaking.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.MultiplayerModels;\n\nnamespace flameborn.Sdk.Controllers.MatchMaking\n{\n    /// &lt;summary&gt;\n    /// Controller for finding a match via PlayFab.\n    /// &lt;/summary&gt;\n    [Serializable]\n    public class FindMatchController_Playfab : Controller&lt;IFindMatchResponse&gt;, IApiController&lt;IFindMatchResponse&gt;\n    {\n        #region Fields\n\n        private string ticketId;\n        private string queueName;\n        private event Action&lt;IFindMatchResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"FindMatchController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"ticketId\"&gt;The ID of the matchmaking ticket.&lt;/param&gt;\n        /// &lt;param name=\"queueName\"&gt;The name of the queue.&lt;/param&gt;\n        public FindMatchController_Playfab(string ticketId, string queueName)\n        {\n            this.ticketId = ticketId;\n            this.queueName = queueName;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to find a match.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IFindMatchResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (string.IsNullOrEmpty(queueName)) \n            { \n                errorLog = $\"{nameof(queueName)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(ticketId)) \n            { \n                errorLog = $\"{nameof(ticketId)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n\n            var request = TakeRequest();\n            PlayFabMultiplayerAPI.GetMatchmakingTicket(request, OnGetMatchResult_EventListener, OnError);\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for getting a matchmaking ticket.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to get a matchmaking ticket.&lt;/returns&gt;\n        private GetMatchmakingTicketRequest TakeRequest()\n        {\n            return new GetMatchmakingTicketRequest\n            {\n                TicketId = ticketId,\n                QueueName = queueName,\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the match result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the matchmaking request.&lt;/param&gt;\n        private void OnGetMatchResult_EventListener(GetMatchmakingTicketResult result)\n        {\n            var response = new FindMatchResponse();\n            response.IsRequestSuccess = result.Status == \"Matched\";\n\n            if (response.IsRequestSuccess)\n            {\n                response.SetResponse(true, result.MatchId, result, \"New match found.\");\n            }\n            else\n            {\n                response.Message = \"Available match not found.\";\n            }\n\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the matchmaking request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new FindMatchResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"FindMatchController_Playfab/#fields","title":"Fields","text":"<ul> <li>ticketId: The ID of the matchmaking ticket.</li> <li>queueName: The name of the queue.</li> </ul>"},{"location":"FindMatchController_Playfab/#methods","title":"Methods","text":""},{"location":"FindMatchController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to find a match via PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"FindMatchController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for getting a matchmaking ticket.</li> <li>OnGetMatchResult_EventListener(GetMatchmakingTicketResult result): Handles the event when the match result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"FindMatchController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>FindMatchController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.MatchMaking;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new FindMatchController_Playfab(\"ticket-id\", \"queue-name\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Match found: \" + response.MatchId);\n            }\n            else\n            {\n                Debug.LogError(\"Failed to find match: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"FindMatchController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IFindMatchResponse</code> interface, refer to the IFindMatchResponse documentation.</p>"},{"location":"FindMatchController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>FindMatchController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.MatchMaking</code> namespace.</p>"},{"location":"FindMatchRequest/","title":"FindMatchRequest Class Documentation","text":""},{"location":"FindMatchRequest/#overview","title":"Overview","text":"<p>The <code>FindMatchRequest</code> class represents a request to find a match in the Flameborn SDK. This class extends <code>Request&lt;IFindMatchResponse&gt;</code> and implements the <code>IApiRequest&lt;IFindMatchResponse&gt;</code> interface.</p>"},{"location":"FindMatchRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking\n</code></pre>"},{"location":"FindMatchRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;IFindMatchResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;IFindMatchResponse&gt;</code></li> </ul>"},{"location":"FindMatchRequest/#constructors","title":"Constructors","text":""},{"location":"FindMatchRequest/#findmatchrequestiapicontrollerifindmatchresponse-controller","title":"<code>FindMatchRequest(IApiController&lt;IFindMatchResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>FindMatchRequest</code> class.</p>"},{"location":"FindMatchRequest/#syntax","title":"Syntax","text":"<pre><code>public FindMatchRequest(IApiController&lt;IFindMatchResponse&gt; controller)\n</code></pre>"},{"location":"FindMatchRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;IFindMatchResponse&gt;</code> - The API controller for the request.</li> </ul>"},{"location":"FindMatchRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;IFindMatchResponse&gt; controller = new FindMatchController();\nFindMatchRequest findMatchRequest = new FindMatchRequest(controller);\n</code></pre>"},{"location":"FindMatchRequest/#methods","title":"Methods","text":""},{"location":"FindMatchRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to find a match.</p>"},{"location":"FindMatchRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;IFindMatchResponse&gt;[] listeners);\n</code></pre>"},{"location":"FindMatchRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;IFindMatchResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"FindMatchRequest/#example_1","title":"Example","text":"<pre><code>findMatchRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"FindMatchRequest/#references","title":"References","text":"<ul> <li>IFindMatchResponse</li> <li>IApiController</li> </ul>"},{"location":"FindMatchResponse/","title":"FindMatchResponse Class Documentation","text":""},{"location":"FindMatchResponse/#overview","title":"Overview","text":"<p>The <code>FindMatchResponse</code> class represents a response for finding a match in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>IFindMatchResponse</code> interface.</p>"},{"location":"FindMatchResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking.Entity\n</code></pre>"},{"location":"FindMatchResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>IFindMatchResponse</code></li> </ul>"},{"location":"FindMatchResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"FindMatchResponse/#properties","title":"Properties","text":""},{"location":"FindMatchResponse/#matchid","title":"<code>MatchId</code>","text":"<p>Gets or sets the match ID of the found match.</p>"},{"location":"FindMatchResponse/#syntax","title":"Syntax","text":"<pre><code>public string MatchId { get; set; }\n</code></pre>"},{"location":"FindMatchResponse/#methods","title":"Methods","text":""},{"location":"FindMatchResponse/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"FindMatchResponse/#syntax_1","title":"Syntax","text":"<pre><code>public void SetResponse&lt;T&gt;(bool isSuccess, string matchId, T response, string message = \"\");\n</code></pre>"},{"location":"FindMatchResponse/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>matchId: <code>string</code> - The match ID of the found match.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"FindMatchResponse/#example","title":"Example","text":"<pre><code>FindMatchResponse findMatchResponse = new FindMatchResponse();\nfindMatchResponse.SetResponse(true, \"Match123\", new object(), \"Success\");\n// Use findMatchResponse in your logic\n</code></pre>"},{"location":"FindMatchResponse/#references","title":"References","text":"<ul> <li>IFindMatchResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"GameButton/","title":"GameButton.cs Documentation","text":""},{"location":"GameButton/#overview","title":"Overview","text":"<p><code>GameButton</code> is a serializable class that represents a button in the game UI. It includes properties for the button's name, image, and click event.</p>"},{"location":"GameButton/#public-fields","title":"Public Fields","text":"Field Name Description Type <code>btnName</code> The name of the button. <code>string</code> <code>btnImage</code> The image of the button. <code>Sprite</code> <code>ClickEvent</code> The event triggered when the button is clicked. <code>Action</code>"},{"location":"GameButton/#constructors","title":"Constructors","text":"Constructor Description Parameters <code>GameButton(string btnName, Sprite buttonImage, params Action[] actions)</code> Initializes a new instance of the <code>GameButton</code> class. <code>btnName</code>, <code>buttonImage</code>, <code>actions</code>"},{"location":"GameButton/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage\n{\n    public void CreateButton()\n    {\n        Sprite mySprite = // Load your sprite here\n        GameButton myButton = new GameButton(\"Click Me\", mySprite, () =&gt; Debug.Log(\"Button Clicked\"));\n    }\n}\n</code></pre>"},{"location":"GameManager/","title":"GameManager.cs Documentation","text":""},{"location":"GameManager/#overview","title":"Overview","text":"<p><code>GameManager</code> is a singleton class responsible for managing the game lifecycle and other managers within the system. It provides methods to set and get managers, as well as handling matchmaking events.</p>"},{"location":"GameManager/#public-methods","title":"Public Methods","text":"Method Name Description Parameters Return Type <code>GameManager()</code> Initializes a new instance of the <code>GameManager</code> class. None Constructor <code>GetManager&lt;T&gt;()</code> Retrieves a manager of the specified type. None <code>(bool IsContain, T? Instance)</code> <code>SetManager&lt;T&gt;(T concrete)</code> Sets a manager of the specified type. <code>T concrete</code> <code>void</code> <code>LoadMainMenuScene()</code> Loads the main menu scene. None <code>void</code>"},{"location":"GameManager/#private-methods","title":"Private Methods","text":"Method Name Description Parameters Return Type <code>EventListener_MatchMaking_OnMatchFound(GetMatchmakingTicketResult result)</code> Handles the event when a matchmaking ticket result is received and a match is found. <code>GetMatchmakingTicketResult result</code> <code>void</code>"},{"location":"GameManager/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage\n{\n    public void InitializeGameManager()\n    {\n        GameManager gameManager = new GameManager();\n        gameManager.SetManager(new UiManager());\n\n        var (isContain, uiManager) = gameManager.GetManager&lt;UiManager&gt;();\n        if (isContain)\n        {\n            uiManager.mainMenu.Show();\n        }\n\n        gameManager.LoadMainMenuScene();\n    }\n}\n</code></pre>"},{"location":"GamePanel/","title":"GamePanel.cs Documentation","text":""},{"location":"GamePanel/#overview","title":"Overview","text":"<p><code>GamePanel</code> is a serializable class that represents the main game panel UI. It provides methods to set the campfire object, show and close buttons, and override show and hide behaviors.</p>"},{"location":"GamePanel/#public-methods","title":"Public Methods","text":"Method Name Description Parameters Return Type <code>SetCampFire(GameObject camp)</code> Sets the campfire object and configures its behavior. <code>GameObject camp</code> <code>void</code> <code>ShowButtons(params GameButton[] buttonsData)</code> Displays the provided buttons on the panel. <code>GameButton[] buttonsData</code> <code>void</code> <code>CloseButtons()</code> Closes all buttons on the panel. None <code>void</code> <code>Show()</code> Shows the panel and initializes button animations. None <code>void</code> <code>Hide()</code> Hides the panel and closes buttons. None <code>void</code>"},{"location":"GamePanel/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage\n{\n    public void SetupGamePanel(GamePanel gamePanel, GameObject campFire)\n    {\n        gamePanel.SetCampFire(campFire);\n\n        GameButton[] buttons = {\n            new GameButton(\"Action 1\", action1Sprite, () =&gt; Debug.Log(\"Action 1\")),\n            new GameButton(\"Action 2\", action2Sprite, () =&gt; Debug.Log(\"Action 2\"))\n        };\n\n        gamePanel.ShowButtons(buttons);\n    }\n}\n</code></pre>"},{"location":"GenericResponseEntity/","title":"GenericResponseEntity Class Documentation","text":""},{"location":"GenericResponseEntity/#overview","title":"Overview","text":"<p>The <code>GenericResponseEntity&lt;T&gt;</code> class represents a generic response entity with custom data in the Flameborn SDK. This class implements the <code>IApiResponse</code> interface.</p>"},{"location":"GenericResponseEntity/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Entity\n</code></pre>"},{"location":"GenericResponseEntity/#properties","title":"Properties","text":""},{"location":"GenericResponseEntity/#isrequestsuccess","title":"<code>IsRequestSuccess</code>","text":"<p>Gets or sets a value indicating whether the request was successful.</p>"},{"location":"GenericResponseEntity/#syntax","title":"Syntax","text":"<pre><code>public bool IsRequestSuccess { get; set; }\n</code></pre>"},{"location":"GenericResponseEntity/#responsetype","title":"<code>ResponseType</code>","text":"<p>Gets or sets the type of the response.</p>"},{"location":"GenericResponseEntity/#syntax_1","title":"Syntax","text":"<pre><code>public Type ResponseType { get; set; }\n</code></pre>"},{"location":"GenericResponseEntity/#response","title":"<code>Response</code>","text":"<p>Gets or sets the response object.</p>"},{"location":"GenericResponseEntity/#syntax_2","title":"Syntax","text":"<pre><code>public object Response { get; set; }\n</code></pre>"},{"location":"GenericResponseEntity/#customdata","title":"<code>CustomData</code>","text":"<p>Gets or sets the custom data associated with the response.</p>"},{"location":"GenericResponseEntity/#syntax_3","title":"Syntax","text":"<pre><code>public T CustomData { get; set; }\n</code></pre>"},{"location":"GenericResponseEntity/#message","title":"<code>Message</code>","text":"<p>Gets or sets the response message.</p>"},{"location":"GenericResponseEntity/#syntax_4","title":"Syntax","text":"<pre><code>public string Message { get; set; }\n</code></pre>"},{"location":"GenericResponseEntity/#constructors","title":"Constructors","text":""},{"location":"GenericResponseEntity/#genericresponseentityt-customdata","title":"<code>GenericResponseEntity(T customData)</code>","text":"<p>Initializes a new instance of the <code>GenericResponseEntity&lt;T&gt;</code> class.</p>"},{"location":"GenericResponseEntity/#syntax_5","title":"Syntax","text":"<pre><code>public GenericResponseEntity(T customData)\n</code></pre>"},{"location":"GenericResponseEntity/#parameters","title":"Parameters","text":"<ul> <li>customData: <code>T</code> - The custom data associated with the response.</li> </ul>"},{"location":"GenericResponseEntity/#example","title":"Example","text":"<pre><code>public class MyGenericResponseEntity : GenericResponseEntity&lt;MyData&gt;\n{\n    public MyGenericResponseEntity(MyData customData) : base(customData) { }\n\n    public override void SetResponse&lt;V&gt;(bool isSuccess, V response, string message = \"\")\n    {\n        IsRequestSuccess = isSuccess;\n        ResponseType = typeof(V);\n        Response = response;\n        Message = message;\n    }\n}\n</code></pre>"},{"location":"GenericResponseEntity/#methods","title":"Methods","text":""},{"location":"GenericResponseEntity/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"GenericResponseEntity/#syntax_6","title":"Syntax","text":"<pre><code>public abstract void SetResponse&lt;V&gt;(bool isSuccess, V response, string message = \"\");\n</code></pre>"},{"location":"GenericResponseEntity/#parameters_1","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>response: <code>V</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"GenericResponseEntity/#references","title":"References","text":"<ul> <li>ResponseEntity</li> <li>IApiResponse</li> </ul>"},{"location":"GetAccountInfoController_Playfab/","title":"GetAccountInfoController_Playfab Class Documentation","text":""},{"location":"GetAccountInfoController_Playfab/#overview","title":"Overview","text":"<p>The <code>GetAccountInfoController_Playfab</code> class manages the retrieval of account information from PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IAccountInfoResponse&gt;</code> class and implements the <code>IApiController&lt;IAccountInfoResponse&gt;</code> interface.</p>"},{"location":"GetAccountInfoController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Core.Accounts;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Data.Abstract;\nusing flameborn.Sdk.Requests.Data.Entity;\nusing HF.Extensions;\nusing Newtonsoft.Json;\nusing PlayFab;\nusing PlayFab.CloudScriptModels;\n\nnamespace flameborn.Sdk.Controllers.Data\n{\n    /// &lt;summary&gt;\n    /// Controller for getting account information from PlayFab.\n    /// &lt;/summary&gt;\n    public class GetAccountInfoController_Playfab : Controller&lt;IAccountInfoResponse&gt;, IApiController&lt;IAccountInfoResponse&gt;\n    {\n        #region Fields\n\n        private string email;\n        private string password;\n        private string functionName;\n        private event Action&lt;IAccountInfoResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"GetAccountInfoController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"email\"&gt;The email associated with the account.&lt;/param&gt;\n        /// &lt;param name=\"password\"&gt;The password associated with the account.&lt;/param&gt;\n        /// &lt;param name=\"functionName\"&gt;The name of the function to execute.&lt;/param&gt;\n        public GetAccountInfoController_Playfab(string email, string password, string functionName = \"GetAccountInfo\")\n        {\n            this.email = email;\n            this.password = password;\n            this.functionName = functionName;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to get account information.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IAccountInfoResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (string.IsNullOrEmpty(email)) \n            { \n                errorLog = $\"{nameof(email)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(password) || password.Length &lt; 6) \n            { \n                errorLog = $\"{nameof(password)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(functionName)) \n            { \n                errorLog = $\"{nameof(functionName)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n            var request = TakeRequest();\n            PlayFabCloudScriptAPI.ExecuteFunction(request, OnGetAccountInfoResult_EventListener, OnError);\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for getting account information.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to get account information.&lt;/returns&gt;\n        private ExecuteFunctionRequest TakeRequest()\n        {\n            return new ExecuteFunctionRequest\n            {\n                FunctionName = functionName,\n                FunctionParameter = new\n                {\n                    email = email,\n                    password = password\n                },\n                GeneratePlayStreamEvent = true\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the account info result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the account info request.&lt;/param&gt;\n        private void OnGetAccountInfoResult_EventListener(ExecuteFunctionResult result)\n        {\n            var response = new Requests.Data.Entity.AccountInfoResponse();\n            var json = result.FunctionResult.ToString();\n            var infoObject = JsonConvert.DeserializeObject&lt;Core.Accounts.AccountInfoResponse&gt;(json);\n            response.SetResponse(true, infoObject.UserName, infoObject.Rating, infoObject.LaunchCount, result, \"Get account info succeed.\");\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the account info request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new Requests.Data.Entity.AccountInfoResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"GetAccountInfoController_Playfab/#fields","title":"Fields","text":"<ul> <li>email: The email associated with the account.</li> <li>password: The password associated with the account.</li> <li>functionName: The name of the function to execute on PlayFab.</li> </ul>"},{"location":"GetAccountInfoController_Playfab/#methods","title":"Methods","text":""},{"location":"GetAccountInfoController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to get account information from PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"GetAccountInfoController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for getting account information.</li> <li>OnGetAccountInfoResult_EventListener(ExecuteFunctionResult result): Handles the event when the account info result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"GetAccountInfoController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>GetAccountInfoController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.Data;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new GetAccountInfoController_Playfab(\"example@example.com\", \"password123\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Account information retrieved successfully.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to retrieve account information: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"GetAccountInfoController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IAccountInfoResponse</code> interface, refer to the IAccountInfoResponse documentation.</p>"},{"location":"GetAccountInfoController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>GetAccountInfoController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Data</code> namespace.</p>"},{"location":"GetAccountInfoRequest/","title":"GetAccountInfoRequest Class Documentation","text":""},{"location":"GetAccountInfoRequest/#overview","title":"Overview","text":"<p>The <code>GetAccountInfoRequest</code> class represents a request to get account information in the Flameborn SDK. This class extends <code>Request&lt;IAccountInfoResponse&gt;</code> and implements the <code>IApiRequest&lt;IAccountInfoResponse&gt;</code> interface.</p>"},{"location":"GetAccountInfoRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data\n</code></pre>"},{"location":"GetAccountInfoRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;IAccountInfoResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;IAccountInfoResponse&gt;</code></li> </ul>"},{"location":"GetAccountInfoRequest/#constructors","title":"Constructors","text":""},{"location":"GetAccountInfoRequest/#getaccountinforequestiapicontrolleriaccountinforesponse-controller","title":"<code>GetAccountInfoRequest(IApiController&lt;IAccountInfoResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>GetAccountInfoRequest</code> class.</p>"},{"location":"GetAccountInfoRequest/#syntax","title":"Syntax","text":"<pre><code>public GetAccountInfoRequest(IApiController&lt;IAccountInfoResponse&gt; controller)\n</code></pre>"},{"location":"GetAccountInfoRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;IAccountInfoResponse&gt;</code> - The API controller for the request.</li> </ul>"},{"location":"GetAccountInfoRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;IAccountInfoResponse&gt; controller = new GetAccountInfoController();\nGetAccountInfoRequest getAccountInfoRequest = new GetAccountInfoRequest(controller);\n</code></pre>"},{"location":"GetAccountInfoRequest/#methods","title":"Methods","text":""},{"location":"GetAccountInfoRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to get account information.</p>"},{"location":"GetAccountInfoRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;IAccountInfoResponse&gt;[] listeners);\n</code></pre>"},{"location":"GetAccountInfoRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;IAccountInfoResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"GetAccountInfoRequest/#example_1","title":"Example","text":"<pre><code>getAccountInfoRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"GetAccountInfoRequest/#references","title":"References","text":"<ul> <li>IAccountInfoResponse</li> <li>IApiController</li> </ul>"},{"location":"GetMatchInfoController_Playfab/","title":"GetMatchInfoController_Playfab Class Documentation","text":""},{"location":"GetMatchInfoController_Playfab/#overview","title":"Overview","text":"<p>The <code>GetMatchInfoController_Playfab</code> class manages getting match information via PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IGetMatchInfoResponse&gt;</code> class and implements the <code>IApiController&lt;IGetMatchInfoResponse&gt;</code> interface.</p>"},{"location":"GetMatchInfoController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing System.Collections.Generic;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.MatchMaking.Abstract;\nusing flameborn.Sdk.Requests.MatchMaking.Entity;\nusing HF.Extensions;\nusing Newtonsoft.Json;\nusing PlayFab;\nusing PlayFab.MultiplayerModels;\n\nnamespace flameborn.Sdk.Controllers.MatchMaking\n{\n    /// &lt;summary&gt;\n    /// Controller for getting match information via PlayFab.\n    /// &lt;/summary&gt;\n    [Serializable]\n    public class GetMatchInfoController_Playfab : Controller&lt;IGetMatchInfoResponse&gt;, IApiController&lt;IGetMatchInfoResponse&gt;\n    {\n        #region Fields\n\n        private string matchId;\n        private string queueName;\n        private event Action&lt;IGetMatchInfoResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"GetMatchInfoController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"matchId\"&gt;The ID of the match.&lt;/param&gt;\n        /// &lt;param name=\"queue\"&gt;The name of the queue.&lt;/param&gt;\n        public GetMatchInfoController_Playfab(string matchId, string queue)\n        {\n            this.matchId = matchId;\n            this.queueName = queue;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to get match information.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IGetMatchInfoResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (string.IsNullOrEmpty(queueName)) \n            { \n                errorLog = $\"{nameof(queueName)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(matchId)) \n            { \n                errorLog = $\"{nameof(matchId)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n\n            var request = TakeRequest();\n            PlayFabMultiplayerAPI.GetMatch(request, OnGetMatchResult_EventListener, OnError);\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for getting match information.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to get match information.&lt;/returns&gt;\n        public GetMatchRequest TakeRequest()\n        {\n            return new GetMatchRequest\n            {\n                MatchId = matchId,\n                QueueName = queueName,\n                ReturnMemberAttributes = true\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the match information result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the match information request.&lt;/param&gt;\n        private void OnGetMatchResult_EventListener(GetMatchResult result)\n        {\n            var response = new GetMatchInfoResponse();\n            var data = new List&lt;PlayerData&gt;();\n            var success = result.Members.Count &gt; 1;\n            var message = success ? \"Players data saved.\" : \"Players data not found.\";\n\n            if (success)\n            {\n                result.Members.ForEach(m =&gt;\n                {\n                    var json = m.Attributes.DataObject.ToString();\n                    var playerData = JsonConvert.DeserializeObject&lt;PlayerData&gt;(json);\n                    data.Add(playerData);\n                });\n            }\n\n            response.SetResponse(success, data, result, message);\n\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the match information request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new GetMatchInfoResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"GetMatchInfoController_Playfab/#fields","title":"Fields","text":"<ul> <li>matchId: The ID of the match.</li> <li>queueName: The name of the queue.</li> </ul>"},{"location":"GetMatchInfoController_Playfab/#methods","title":"Methods","text":""},{"location":"GetMatchInfoController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to get match information via PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"GetMatchInfoController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for getting match information.</li> <li>OnGetMatchResult_EventListener(GetMatchResult result): Handles the event when the match information result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"GetMatchInfoController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>GetMatchInfoController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.MatchMaking;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new GetMatchInfoController_Playfab(\"match-id\", \"queue-name\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Match information retrieved.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to retrieve match information: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"GetMatchInfoController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IGetMatchInfoResponse</code> interface, refer to the IGetMatchInfoResponse documentation.</p>"},{"location":"GetMatchInfoController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>GetMatchInfoController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.MatchMaking</code> namespace.</p>"},{"location":"GetMatchInfoRequest/","title":"GetMatchInfoRequest Class Documentation","text":""},{"location":"GetMatchInfoRequest/#overview","title":"Overview","text":"<p>The <code>GetMatchInfoRequest</code> class represents a request to get match information in the Flameborn SDK. This class extends <code>Request&lt;IGetMatchInfoResponse&gt;</code> and implements the <code>IApiRequest&lt;IGetMatchInfoResponse&gt;</code> interface.</p>"},{"location":"GetMatchInfoRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking\n</code></pre>"},{"location":"GetMatchInfoRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;IGetMatchInfoResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;IGetMatchInfoResponse&gt;</code></li> </ul>"},{"location":"GetMatchInfoRequest/#constructors","title":"Constructors","text":""},{"location":"GetMatchInfoRequest/#getmatchinforequestiapicontrollerigetmatchinforesponse-controller","title":"<code>GetMatchInfoRequest(IApiController&lt;IGetMatchInfoResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>GetMatchInfoRequest</code> class.</p>"},{"location":"GetMatchInfoRequest/#syntax","title":"Syntax","text":"<pre><code>public GetMatchInfoRequest(IApiController&lt;IGetMatchInfoResponse&gt; controller)\n</code></pre>"},{"location":"GetMatchInfoRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;IGetMatchInfoResponse&gt;</code> - The API controller for the request.</li> </ul>"},{"location":"GetMatchInfoRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;IGetMatchInfoResponse&gt; controller = new GetMatchInfoController();\nGetMatchInfoRequest getMatchInfoRequest = new GetMatchInfoRequest(controller);\n</code></pre>"},{"location":"GetMatchInfoRequest/#methods","title":"Methods","text":""},{"location":"GetMatchInfoRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to get match information.</p>"},{"location":"GetMatchInfoRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;IGetMatchInfoResponse&gt;[] listeners);\n</code></pre>"},{"location":"GetMatchInfoRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;IGetMatchInfoResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"GetMatchInfoRequest/#example_1","title":"Example","text":"<pre><code>getMatchInfoRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"GetMatchInfoRequest/#references","title":"References","text":"<ul> <li>IGetMatchInfoResponse</li> <li>IApiController</li> </ul>"},{"location":"GetMatchInfoResponse/","title":"GetMatchInfoResponse Class Documentation","text":""},{"location":"GetMatchInfoResponse/#overview","title":"Overview","text":"<p>The <code>GetMatchInfoResponse</code> class represents a response for getting match information in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>IGetMatchInfoResponse</code> interface.</p>"},{"location":"GetMatchInfoResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking.Entity\n</code></pre>"},{"location":"GetMatchInfoResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>IGetMatchInfoResponse</code></li> </ul>"},{"location":"GetMatchInfoResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"GetMatchInfoResponse/#properties","title":"Properties","text":""},{"location":"GetMatchInfoResponse/#players","title":"<code>Players</code>","text":"<p>Gets or sets the list of player data in the match.</p>"},{"location":"GetMatchInfoResponse/#syntax","title":"Syntax","text":"<pre><code>public List&lt;PlayerData&gt; Players { get; set; }\n</code></pre>"},{"location":"GetMatchInfoResponse/#methods","title":"Methods","text":""},{"location":"GetMatchInfoResponse/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"GetMatchInfoResponse/#syntax_1","title":"Syntax","text":"<pre><code>public void SetResponse&lt;T&gt;(bool isSuccess, List&lt;PlayerData&gt; players, T response, string message = \"\");\n</code></pre>"},{"location":"GetMatchInfoResponse/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>players: <code>List&lt;PlayerData&gt;</code> - The list of player data.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"GetMatchInfoResponse/#example","title":"Example","text":"<pre><code>GetMatchInfoResponse getMatchInfoResponse = new GetMatchInfoResponse();\ngetMatchInfoResponse.SetResponse(true, new List&lt;PlayerData&gt;(), new object(), \"Success\");\n// Use getMatchInfoResponse in your logic\n</code></pre>"},{"location":"GetMatchInfoResponse/#references","title":"References","text":"<ul> <li>IGetMatchInfoResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"GetPlayerStatisticsController_Playfab/","title":"GetPlayerStatisticsController_Playfab Class Documentation","text":""},{"location":"GetPlayerStatisticsController_Playfab/#overview","title":"Overview","text":"<p>The <code>GetPlayerStatisticsController_Playfab</code> class manages the retrieval of player statistics from PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IGetStatisticsResponse&gt;</code> class and implements the <code>IApiController&lt;IGetStatisticsResponse&gt;</code> interface.</p>"},{"location":"GetPlayerStatisticsController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Data.Abstract;\nusing flameborn.Sdk.Requests.Data.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.ClientModels;\nusing UnityEngine;\n\nnamespace flameborn.Sdk.Controllers.Data\n{\n    /// &lt;summary&gt;\n    /// Controller for getting player statistics from PlayFab.\n    /// &lt;/summary&gt;\n    public class GetPlayerStatisticsController_Playfab : Controller&lt;IGetStatisticsResponse&gt;, IApiController&lt;IGetStatisticsResponse&gt;\n    {\n        private string[] statisticNames;\n        private event Action&lt;IGetStatisticsResponse&gt; onGetResult;\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"GetPlayerStatisticsController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"statisticNames\"&gt;The names of the statistics to retrieve.&lt;/param&gt;\n        public GetPlayerStatisticsController_Playfab(params string[] statisticNames)\n        {\n            this.statisticNames = statisticNames;\n        }\n\n        /// &lt;summary&gt;\n        /// Sends the request to get player statistics.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IGetStatisticsResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (statisticNames == null || statisticNames.Length == 0)\n            {\n                errorLog = $\"{nameof(statisticNames)} is null or empty.\";\n                return;\n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n            var request = TakeRequest();\n            PlayFabClientAPI.GetPlayerStatistics(request, OnGetPlayerStatisticsResult_EventListener, OnError);\n        }\n\n        private void OnGetPlayerStatisticsResult_EventListener(GetPlayerStatisticsResult result)\n        {\n            var response = new GetStatisticsResponse();\n            response.SetResponse(result.Statistics.ToDictionary(stat =&gt; stat.StatisticName, stat =&gt; stat.Value));\n            onGetResult?.Invoke(response);\n        }\n\n        private void OnError(PlayFabError error)\n        {\n            var response = new GetStatisticsResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        private GetPlayerStatisticsRequest TakeRequest()\n        {\n            return new GetPlayerStatisticsRequest\n            {\n                StatisticNames = statisticNames\n            };\n        }\n    }\n}\n</code></pre>"},{"location":"GetPlayerStatisticsController_Playfab/#fields","title":"Fields","text":"<ul> <li>statisticNames: The names of the statistics to retrieve from PlayFab.</li> </ul>"},{"location":"GetPlayerStatisticsController_Playfab/#methods","title":"Methods","text":""},{"location":"GetPlayerStatisticsController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to get player statistics from PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"GetPlayerStatisticsController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for getting player statistics.</li> <li>OnGetPlayerStatisticsResult_EventListener(GetPlayerStatisticsResult result): Handles the event when the player statistics result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"GetPlayerStatisticsController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>GetPlayerStatisticsController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.Data;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new GetPlayerStatisticsController_Playfab(\"statistic1\", \"statistic2\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Player statistics retrieved successfully.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to retrieve player statistics: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"GetPlayerStatisticsController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IGetStatisticsResponse</code> interface, refer to the IGetStatisticsResponse documentation.</p>"},{"location":"GetPlayerStatisticsController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>GetPlayerStatisticsController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Data</code> namespace.</p>"},{"location":"GetStatisticsRequest/","title":"GetStatisticsRequest Class Documentation","text":""},{"location":"GetStatisticsRequest/#overview","title":"Overview","text":"<p>The <code>GetStatisticsRequest</code> class represents a request to get statistics in the Flameborn SDK. This class extends <code>Request&lt;IGetStatisticsResponse&gt;</code> and implements the <code>IApiRequest&lt;IGetStatisticsResponse&gt;</code> interface.</p>"},{"location":"GetStatisticsRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login\n</code></pre>"},{"location":"GetStatisticsRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;IGetStatisticsResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;IGetStatisticsResponse&gt;</code></li> </ul>"},{"location":"GetStatisticsRequest/#constructors","title":"Constructors","text":""},{"location":"GetStatisticsRequest/#getstatisticsrequestiapicontrollerigetstatisticsresponse-controller","title":"<code>GetStatisticsRequest(IApiController&lt;IGetStatisticsResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>GetStatisticsRequest</code> class.</p>"},{"location":"GetStatisticsRequest/#syntax","title":"Syntax","text":"<pre><code>public GetStatisticsRequest(IApiController&lt;IGetStatisticsResponse&gt; controller)\n</code></pre>"},{"location":"GetStatisticsRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;IGetStatisticsResponse&gt;</code> - The API controller for the request.</li> </ul>"},{"location":"GetStatisticsRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;IGetStatisticsResponse&gt; controller = new GetStatisticsController();\nGetStatisticsRequest getStatisticsRequest = new GetStatisticsRequest(controller);\n</code></pre>"},{"location":"GetStatisticsRequest/#methods","title":"Methods","text":""},{"location":"GetStatisticsRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to get statistics.</p>"},{"location":"GetStatisticsRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;IGetStatisticsResponse&gt;[] listeners);\n</code></pre>"},{"location":"GetStatisticsRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;IGetStatisticsResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"GetStatisticsRequest/#example_1","title":"Example","text":"<pre><code>getStatisticsRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"GetStatisticsRequest/#references","title":"References","text":"<ul> <li>IGetStatisticsResponse</li> <li>IApiController</li> </ul>"},{"location":"GetStatisticsResponse/","title":"GetStatisticsResponse Class Documentation","text":""},{"location":"GetStatisticsResponse/#overview","title":"Overview","text":"<p>The <code>GetStatisticsResponse</code> class represents the response for getting statistics in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>IGetStatisticsResponse</code> interface.</p>"},{"location":"GetStatisticsResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data.Entity\n</code></pre>"},{"location":"GetStatisticsResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>IGetStatisticsResponse</code></li> </ul>"},{"location":"GetStatisticsResponse/#properties","title":"Properties","text":""},{"location":"GetStatisticsResponse/#statistics","title":"<code>Statistics</code>","text":"<p>Gets or sets the dictionary containing statistics data.</p>"},{"location":"GetStatisticsResponse/#syntax","title":"Syntax","text":"<pre><code>public Dictionary&lt;string, int&gt; Statistics { get; set; }\n</code></pre>"},{"location":"GetStatisticsResponse/#methods","title":"Methods","text":""},{"location":"GetStatisticsResponse/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"GetStatisticsResponse/#syntax_1","title":"Syntax","text":"<pre><code>public void SetResponse&lt;T&gt;(bool isSuccess, Dictionary&lt;string, int&gt; statistics, T response, string message = \"\");\n</code></pre>"},{"location":"GetStatisticsResponse/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>statistics: <code>Dictionary&lt;string, int&gt;</code> - The dictionary containing statistics data.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"GetStatisticsResponse/#example","title":"Example","text":"<pre><code>GetStatisticsResponse getStatisticsResponse = new GetStatisticsResponse();\ngetStatisticsResponse.SetResponse(true, new Dictionary&lt;string, int&gt;(), new object(), \"Success\");\n// Use getStatisticsResponse in your logic\n</code></pre>"},{"location":"GetStatisticsResponse/#references","title":"References","text":"<ul> <li>IGetStatisticsResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"IAccount/","title":"IAccount Interface Documentation","text":""},{"location":"IAccount/#overview","title":"Overview","text":"<p>The <code>IAccount</code> interface represents an account with user data management functionalities within the Flameborn SDK. This interface allows for getting and setting user data associated with the account.</p>"},{"location":"IAccount/#interface-definition","title":"Interface Definition","text":"<pre><code>using flameborn.Core.User;\n\nnamespace flameborn.Core.Accounts\n{\n    /// &lt;summary&gt;\n    /// Represents an account interface with user data management functionalities.\n    /// &lt;/summary&gt;\n    public interface IAccount\n    {\n        /// &lt;summary&gt;\n        /// Gets the user data associated with the account.\n        /// &lt;/summary&gt;\n        UserData UserData { get; }\n\n        /// &lt;summary&gt;\n        /// Sets the user data for the account.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"data\"&gt;The user data to be set.&lt;/param&gt;\n        void SetUserData(UserData data);\n    }\n}\n</code></pre>"},{"location":"IAccount/#properties","title":"Properties","text":"<ul> <li>UserData: Gets the user data associated with the account.</li> </ul>"},{"location":"IAccount/#methods","title":"Methods","text":""},{"location":"IAccount/#public-methods","title":"Public Methods","text":"<ul> <li>SetUserData(UserData data): Sets the user data for the account.</li> <li>Parameters:<ul> <li>data: The user data to be set.</li> </ul> </li> </ul>"},{"location":"IAccount/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to implement the <code>IAccount</code> interface in a concrete class.</p> <pre><code>using flameborn.Core.User;\n\npublic class MyAccount : IAccount\n{\n    public UserData UserData { get; private set; }\n\n    public void SetUserData(UserData data)\n    {\n        UserData = data;\n    }\n}\n</code></pre>"},{"location":"IAccount/#see-also","title":"See Also","text":"<p>For more information on the <code>UserData</code> class, refer to the UserData documentation.</p>"},{"location":"IAccount/#file-location","title":"File Location","text":"<p>This interface is defined in the <code>IAccount.cs</code> file, located in the <code>flameborn.Core.Accounts</code> namespace.</p>"},{"location":"IAccountInfoResponse/","title":"IAccountInfoResponse Interface Documentation","text":""},{"location":"IAccountInfoResponse/#overview","title":"Overview","text":"<p>The <code>IAccountInfoResponse</code> interface defines the structure for account info responses in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"IAccountInfoResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data.Abstract\n</code></pre>"},{"location":"IAccountInfoResponse/#properties","title":"Properties","text":""},{"location":"IAccountInfoResponse/#launchcount","title":"<code>LaunchCount</code>","text":"<p>Gets the launch count of the account.</p>"},{"location":"IAccountInfoResponse/#syntax","title":"Syntax","text":"<pre><code>int LaunchCount { get; }\n</code></pre>"},{"location":"IAccountInfoResponse/#rating","title":"<code>Rating</code>","text":"<p>Gets the rating of the account.</p>"},{"location":"IAccountInfoResponse/#syntax_1","title":"Syntax","text":"<pre><code>int Rating { get; }\n</code></pre>"},{"location":"IAccountInfoResponse/#username","title":"<code>UserName</code>","text":"<p>Gets the user name of the account.</p>"},{"location":"IAccountInfoResponse/#syntax_2","title":"Syntax","text":"<pre><code>string UserName { get; }\n</code></pre>"},{"location":"IAccountInfoResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IAccountManager/","title":"IAccountManager Interface Documentation","text":""},{"location":"IAccountManager/#overview","title":"Overview","text":"<p>The <code>IAccountManager</code> interface defines the structure for managing account-related operations within the Flameborn SDK. This interface extends from the <code>IManager</code> interface, which is part of the core management system. The <code>IAccountManager</code> interface can be extended to include additional methods and properties specific to account management.</p>"},{"location":"IAccountManager/#interface-definition","title":"Interface Definition","text":"<pre><code>using flameborn.Core.Managers.Abstract;\n\nnamespace flameborn.Sdk.Managers.Abstract\n{\n    /// &lt;summary&gt;\n    /// Interface for managing account-related operations.\n    /// &lt;/summary&gt;\n    public interface IAccountManager : IManager\n    {\n        // Additional methods and properties specific to account management can be added here.\n    }\n}\n</code></pre>"},{"location":"IAccountManager/#methods-and-properties","title":"Methods and Properties","text":"<p>The <code>IAccountManager</code> interface currently inherits all methods and properties from the <code>IManager</code> interface. Additional methods and properties specific to account management can be added to this interface as needed.</p>"},{"location":"IAccountManager/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to implement the <code>IAccountManager</code> interface in a concrete class.</p> <pre><code>using flameborn.Core.Managers.Abstract;\nusing flameborn.Sdk.Managers.Abstract;\n\nnamespace flameborn.Sdk.Managers\n{\n    /// &lt;summary&gt;\n    /// Concrete implementation of the IAccountManager interface.\n    /// &lt;/summary&gt;\n    public class AccountManager : IAccountManager\n    {\n        // Implement the methods and properties of the IAccountManager interface here.\n    }\n}\n</code></pre>"},{"location":"IAccountManager/#see-also","title":"See Also","text":"<p>For more information on the <code>IManager</code> interface, refer to the IManager documentation.</p>"},{"location":"IAccountManager/#file-location","title":"File Location","text":"<p>This interface is defined in the <code>IAcountManager.cs</code> file, located in the <code>flameborn.Sdk.Managers.Abstract</code> namespace.</p>"},{"location":"IApiController/","title":"IApiController Interface Documentation","text":""},{"location":"IApiController/#overview","title":"Overview","text":"<p>The <code>IApiController</code> interface defines the structure for API controllers that manage sending requests and handling responses within the Flameborn SDK. This interface allows for the implementation of controllers that can send requests and process responses of a specified type.</p>"},{"location":"IApiController/#interface-definition","title":"Interface Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Requests.Abstract;\n\nnamespace flameborn.Sdk.Controllers.Abstract\n{\n    /// &lt;summary&gt;\n    /// Defines an interface for API controllers that manage sending requests and handling responses.\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=\"T\"&gt;The type of response managed by the controller.&lt;/typeparam&gt;\n    public interface IApiController&lt;T&gt; where T : IApiResponse\n    {\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends a request and processes it with the specified listeners.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        void SendRequest(out string errorLog, params Action&lt;T&gt;[] listeners);\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"IApiController/#methods","title":"Methods","text":""},{"location":"IApiController/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends a request and processes it with the specified listeners. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"IApiController/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to implement the <code>IApiController</code> interface in a concrete class.</p> <pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Abstract;\n\npublic class MyApiController : IApiController&lt;MyApiResponse&gt;\n{\n    public void SendRequest(out string errorLog, params Action&lt;MyApiResponse&gt;[] listeners)\n    {\n        errorLog = string.Empty;\n        // Implementation of sending the request and processing the response\n    }\n}\n\npublic class MyApiResponse : IApiResponse\n{\n    // Implementation of the response\n}\n</code></pre>"},{"location":"IApiController/#see-also","title":"See Also","text":"<p>For more information on the <code>IApiResponse</code> interface, refer to the IApiResponse documentation.</p>"},{"location":"IApiController/#file-location","title":"File Location","text":"<p>This interface is defined in the <code>IApiController.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Abstract</code> namespace.</p>"},{"location":"IApiRequest/","title":"IApiRequest Interface Documentation","text":""},{"location":"IApiRequest/#overview","title":"Overview","text":"<p>The <code>IApiRequest&lt;T&gt;</code> interface defines the structure for API requests in the Flameborn SDK. This interface is generic and works with a response type that implements <code>IApiResponse</code>.</p>"},{"location":"IApiRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Abstract\n</code></pre>"},{"location":"IApiRequest/#methods","title":"Methods","text":""},{"location":"IApiRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends a request and processes it with the specified listeners.</p>"},{"location":"IApiRequest/#syntax","title":"Syntax","text":"<pre><code>void SendRequest(out string errorLog, params Action&lt;T&gt;[] listeners);\n</code></pre>"},{"location":"IApiRequest/#parameters","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;T&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"IApiRequest/#example","title":"Example","text":"<pre><code>public class MyRequest : IApiRequest&lt;MyResponse&gt;\n{\n    public void SendRequest(out string errorLog, params Action&lt;MyResponse&gt;[] listeners)\n    {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"IApiRequest/#references","title":"References","text":"<ul> <li>IApiResponse</li> <li>IApiController</li> </ul>"},{"location":"IApiResponse/","title":"IApiResponse Interface Documentation","text":""},{"location":"IApiResponse/#overview","title":"Overview","text":"<p>The <code>IApiResponse</code> interface defines the structure for API responses in the Flameborn SDK. This interface is used to encapsulate the details of a response from an API request.</p>"},{"location":"IApiResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Abstract\n</code></pre>"},{"location":"IApiResponse/#properties","title":"Properties","text":""},{"location":"IApiResponse/#isrequestsuccess","title":"<code>IsRequestSuccess</code>","text":"<p>Indicates whether the request was successful.</p>"},{"location":"IApiResponse/#syntax","title":"Syntax","text":"<pre><code>bool IsRequestSuccess { get; }\n</code></pre>"},{"location":"IApiResponse/#message","title":"<code>Message</code>","text":"<p>Gets the response message.</p>"},{"location":"IApiResponse/#syntax_1","title":"Syntax","text":"<pre><code>string Message { get; }\n</code></pre>"},{"location":"IApiResponse/#response","title":"<code>Response</code>","text":"<p>Gets the response object.</p>"},{"location":"IApiResponse/#syntax_2","title":"Syntax","text":"<pre><code>object Response { get; }\n</code></pre>"},{"location":"IApiResponse/#responsetype","title":"<code>ResponseType</code>","text":"<p>Gets the type of the response.</p>"},{"location":"IApiResponse/#syntax_3","title":"Syntax","text":"<pre><code>Type ResponseType { get; }\n</code></pre>"},{"location":"IApiResponse/#methods","title":"Methods","text":""},{"location":"IApiResponse/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"IApiResponse/#syntax_4","title":"Syntax","text":"<pre><code>void SetResponse&lt;T&gt;(bool isSuccess, T response, string message = \"\");\n</code></pre>"},{"location":"IApiResponse/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"IApiResponse/#example","title":"Example","text":"<pre><code>public class MyResponse : IApiResponse\n{\n    public bool IsRequestSuccess { get; private set; }\n    public string Message { get; private set; }\n    public object Response { get; private set; }\n    public Type ResponseType { get; private set; }\n\n    public void SetResponse&lt;T&gt;(bool isSuccess, T response, string message = \"\")\n    {\n        IsRequestSuccess = isSuccess;\n        ResponseType = typeof(T);\n        Response = response;\n        Message = message;\n    }\n}\n</code></pre>"},{"location":"IApiResponse/#references","title":"References","text":"<ul> <li>IApiRequest</li> <li>Request</li> </ul>"},{"location":"IConfigurationManager/","title":"IConfigurationManager Interface Documentation","text":""},{"location":"IConfigurationManager/#overview","title":"Overview","text":"<p>The <code>IConfigurationManager</code> interface defines the structure for managing configuration-related operations within the Flameborn SDK. This interface extends from the <code>IManager</code> interface, which is part of the core management system. The <code>IConfigurationManager</code> interface can be extended to include additional methods and properties specific to configuration management.</p>"},{"location":"IConfigurationManager/#interface-definition","title":"Interface Definition","text":"<pre><code>using flameborn.Core.Managers.Abstract;\n\nnamespace flameborn.Sdk.Managers.Abstract\n{\n    /// &lt;summary&gt;\n    /// Interface for managing configuration-related operations.\n    /// &lt;/summary&gt;\n    public interface IConfigurationManager : IManager\n    {\n        // Additional methods and properties specific to configuration management can be added here.\n    }\n}\n</code></pre>"},{"location":"IConfigurationManager/#methods-and-properties","title":"Methods and Properties","text":"<p>The <code>IConfigurationManager</code> interface currently inherits all methods and properties from the <code>IManager</code> interface. Additional methods and properties specific to configuration management can be added to this interface as needed.</p>"},{"location":"IConfigurationManager/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to implement the <code>IConfigurationManager</code> interface in a concrete class.</p> <pre><code>using flameborn.Core.Managers.Abstract;\nusing flameborn.Sdk.Managers.Abstract;\n\nnamespace flameborn.Sdk.Managers\n{\n    /// &lt;summary&gt;\n    /// Concrete implementation of the IConfigurationManager interface.\n    /// &lt;/summary&gt;\n    public class ConfigurationManager : IConfigurationManager\n    {\n        // Implement the methods and properties of the IConfigurationManager interface here.\n    }\n}\n</code></pre>"},{"location":"IConfigurationManager/#see-also","title":"See Also","text":"<p>For more information on the <code>IManager</code> interface, refer to the IManager documentation.</p>"},{"location":"IConfigurationManager/#file-location","title":"File Location","text":"<p>This interface is defined in the <code>IConfigurationManager.cs</code> file, located in the <code>flameborn.Sdk.Managers.Abstract</code> namespace.</p>"},{"location":"ICreateMatchTicketResponse/","title":"ICreateMatchTicketResponse Interface Documentation","text":""},{"location":"ICreateMatchTicketResponse/#overview","title":"Overview","text":"<p>The <code>ICreateMatchTicketResponse</code> interface defines the structure for responses related to creating match tickets in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"ICreateMatchTicketResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking.Abstract\n</code></pre>"},{"location":"ICreateMatchTicketResponse/#properties","title":"Properties","text":""},{"location":"ICreateMatchTicketResponse/#ticketid","title":"<code>TicketId</code>","text":"<p>Gets the ticket ID of the created match ticket.</p>"},{"location":"ICreateMatchTicketResponse/#syntax","title":"Syntax","text":"<pre><code>string TicketId { get; }\n</code></pre>"},{"location":"ICreateMatchTicketResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IDataPanel/","title":"IDataPanel.cs Documentation","text":""},{"location":"IDataPanel/#overview","title":"Overview","text":"<p><code>IDataPanel&lt;T&gt;</code> is an interface for data panels that manage data of a specific type. It provides methods to handle data changes and initialize the panel with data.</p>"},{"location":"IDataPanel/#methods","title":"Methods","text":"Method Name Description Parameters Return Type <code>EventListener_OnDataHasChanged(T value)</code> Event listener for when data has changed. <code>T value</code> <code>void</code> <code>Init(T values)</code> Initializes the panel with the specified data. <code>T values</code> <code>void</code>"},{"location":"IDataPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class MyDataPanel : IDataPanel&lt;MyDataType&gt;\n{\n    public void EventListener_OnDataHasChanged(MyDataType value)\n    {\n        // Handle data change\n    }\n\n    public void Init(MyDataType values)\n    {\n        // Initialize with data\n    }\n}\n</code></pre>"},{"location":"IFindMatchResponse/","title":"IFindMatchResponse Interface Documentation","text":""},{"location":"IFindMatchResponse/#overview","title":"Overview","text":"<p>The <code>IFindMatchResponse</code> interface defines the structure for responses related to finding matches in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"IFindMatchResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking.Abstract\n</code></pre>"},{"location":"IFindMatchResponse/#properties","title":"Properties","text":""},{"location":"IFindMatchResponse/#matchid","title":"<code>MatchId</code>","text":"<p>Gets the match ID of the found match.</p>"},{"location":"IFindMatchResponse/#syntax","title":"Syntax","text":"<pre><code>string MatchId { get; }\n</code></pre>"},{"location":"IFindMatchResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IGetMatchInfoResponse/","title":"IGetMatchInfoResponse Interface Documentation","text":""},{"location":"IGetMatchInfoResponse/#overview","title":"Overview","text":"<p>The <code>IGetMatchInfoResponse</code> interface defines the structure for responses related to getting match information in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"IGetMatchInfoResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.MatchMaking.Abstract\n</code></pre>"},{"location":"IGetMatchInfoResponse/#properties","title":"Properties","text":""},{"location":"IGetMatchInfoResponse/#players","title":"<code>Players</code>","text":"<p>Gets the list of player data in the match.</p>"},{"location":"IGetMatchInfoResponse/#syntax","title":"Syntax","text":"<pre><code>List&lt;PlayerData&gt; Players { get; }\n</code></pre>"},{"location":"IGetMatchInfoResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IGetStatisticsResponse/","title":"IGetStatisticsResponse Interface Documentation","text":""},{"location":"IGetStatisticsResponse/#overview","title":"Overview","text":"<p>The <code>IGetStatisticsResponse</code> interface defines the structure for responses that contain statistics data in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"IGetStatisticsResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data.Abstract\n</code></pre>"},{"location":"IGetStatisticsResponse/#properties","title":"Properties","text":""},{"location":"IGetStatisticsResponse/#statistics","title":"<code>Statistics</code>","text":"<p>Gets the dictionary containing statistics data.</p>"},{"location":"IGetStatisticsResponse/#syntax","title":"Syntax","text":"<pre><code>Dictionary&lt;string, int&gt; Statistics { get; }\n</code></pre>"},{"location":"IGetStatisticsResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IHideable/","title":"IHideable Interface Documentation","text":""},{"location":"IHideable/#overview","title":"Overview","text":"<p>The <code>IHideable</code> interface defines a contract for objects that can be hidden within the Flameborn SDK.</p>"},{"location":"IHideable/#interface-definition","title":"Interface Definition","text":"<pre><code>namespace flameborn.Core.Contracts.Abilities\n{\n    /// &lt;summary&gt;\n    /// Defines an interface for objects that can be hidden.\n    /// &lt;/summary&gt;\n    public interface IHideAble\n    {\n        /// &lt;summary&gt;\n        /// Hides the object.\n        /// &lt;/summary&gt;\n        void Hide();\n    }\n}\n</code></pre>"},{"location":"IHideable/#methods","title":"Methods","text":""},{"location":"IHideable/#public-methods","title":"Public Methods","text":"<ul> <li>Hide(): Hides the object.</li> </ul>"},{"location":"IHideable/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to implement the <code>IHideable</code> interface in a concrete class.</p> <pre><code>using flameborn.Core.Contracts.Abilities;\n\npublic class MyHideableObject : IHideAble\n{\n    public void Hide()\n    {\n        // Implementation of hiding the object\n    }\n}\n</code></pre>"},{"location":"IHideable/#file-location","title":"File Location","text":"<p>This interface is defined in the <code>IHideable.cs</code> file, located in the <code>flameborn.Core.Contracts.Abilities</code> namespace.</p>"},{"location":"ILobbyPanel/","title":"ILobbyPanel.cs Documentation","text":""},{"location":"ILobbyPanel/#overview","title":"Overview","text":"<p><code>ILobbyPanel</code> is an interface that defines a contract for lobby panel classes. It inherits from the <code>IPanel</code> interface, combining the capabilities of showing, hiding, and locking UI panels.</p>"},{"location":"ILobbyPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class MyLobbyPanel : ILobbyPanel\n{\n    // Implement methods from IPanel\n    public void Show() { }\n    public void Hide() { }\n    public void Lock(object lockerObject) { }\n    public void UnLock(object lockerObject) { }\n}\n</code></pre>"},{"location":"ILockable/","title":"ILockable Interface Documentation","text":""},{"location":"ILockable/#overview","title":"Overview","text":"<p>The <code>ILockable</code> interface defines a contract for objects that can be locked and unlocked within the Flameborn SDK.</p>"},{"location":"ILockable/#interface-definition","title":"Interface Definition","text":"<pre><code>namespace flameborn.Core.Contracts.Abilities\n{\n    /// &lt;summary&gt;\n    /// Defines an interface for objects that can be locked and unlocked.\n    /// &lt;/summary&gt;\n    public interface ILockAble\n    {\n        /// &lt;summary&gt;\n        /// Locks the object with a specified locker.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"lockerObject\"&gt;The object used to lock.&lt;/param&gt;\n        void Lock(object lockerObject);\n\n        /// &lt;summary&gt;\n        /// Unlocks the object with a specified locker.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"lockerObject\"&gt;The object used to unlock.&lt;/param&gt;\n        void UnLock(object lockerObject);\n    }\n}\n</code></pre>"},{"location":"ILockable/#methods","title":"Methods","text":""},{"location":"ILockable/#public-methods","title":"Public Methods","text":"<ul> <li>Lock(object lockerObject): Locks the object with a specified locker.</li> <li>Parameters:<ul> <li>lockerObject: The object used to lock.</li> </ul> </li> <li>UnLock(object lockerObject): Unlocks the object with a specified locker.</li> <li>Parameters:<ul> <li>lockerObject: The object used to unlock.</li> </ul> </li> </ul>"},{"location":"ILockable/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to implement the <code>ILockable</code> interface in a concrete class.</p> <pre><code>using flameborn.Core.Contracts.Abilities;\n\npublic class MyLockableObject : ILockAble\n{\n    private bool isLocked = false;\n    private object locker;\n\n    public void Lock(object lockerObject)\n    {\n        if (!isLocked)\n        {\n            isLocked = true;\n            locker = lockerObject;\n        }\n    }\n\n    public void UnLock(object lockerObject)\n    {\n        if (isLocked &amp;&amp; locker == lockerObject)\n        {\n            isLocked = false;\n            locker = null;\n        }\n    }\n}\n</code></pre>"},{"location":"ILockable/#file-location","title":"File Location","text":"<p>This interface is defined in the <code>ILockable.cs</code> file, located in the <code>flameborn.Core.Contracts.Abilities</code> namespace.</p>"},{"location":"ILoginPanel/","title":"ILoginPanel.cs Documentation","text":""},{"location":"ILoginPanel/#overview","title":"Overview","text":"<p><code>ILoginPanel</code> is an interface that defines a contract for login panel classes. It includes properties to validate email and password, and references to associated panels.</p>"},{"location":"ILoginPanel/#properties","title":"Properties","text":"Property Name Description Type <code>IsEmailValid</code> Indicates whether the email is valid. <code>bool</code> <code>IsPasswordValid</code> Indicates whether the password is valid. <code>bool</code> <code>RecoveryPanel</code> The recovery panel associated with the login panel. <code>IPanel</code> <code>RegisterPanel</code> The register panel associated with the login panel. <code>IPanel</code>"},{"location":"ILoginPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class MyLoginPanel : ILoginPanel\n{\n    public bool IsEmailValid { get; }\n    public bool IsPasswordValid { get; }\n    public IPanel RecoveryPanel { get; }\n    public IPanel RegisterPanel { get; }\n\n    // Implement methods from IPanel\n    public void Show() { }\n    public void Hide() { }\n    public void Lock(object lockerObject) { }\n    public void UnLock(object lockerObject) { }\n}\n</code></pre>"},{"location":"ILoginResponse/","title":"ILoginResponse Interface Documentation","text":""},{"location":"ILoginResponse/#overview","title":"Overview","text":"<p>The <code>ILoginResponse</code> interface defines the structure for login responses in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"ILoginResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login.Abstract\n</code></pre>"},{"location":"ILoginResponse/#properties","title":"Properties","text":""},{"location":"ILoginResponse/#isaccountlogged","title":"<code>IsAccountLogged</code>","text":"<p>Gets a value indicating whether the account is logged in.</p>"},{"location":"ILoginResponse/#syntax","title":"Syntax","text":"<pre><code>bool IsAccountLogged { get; }\n</code></pre>"},{"location":"ILoginResponse/#newlycreated","title":"<code>NewlyCreated</code>","text":"<p>Gets a value indicating whether the account is newly created.</p>"},{"location":"ILoginResponse/#syntax_1","title":"Syntax","text":"<pre><code>bool NewlyCreated { get; }\n</code></pre>"},{"location":"ILoginResponse/#playfabid","title":"<code>PlayFabId</code>","text":"<p>Gets the PlayFab ID associated with the account.</p>"},{"location":"ILoginResponse/#syntax_2","title":"Syntax","text":"<pre><code>string PlayFabId { get; }\n</code></pre>"},{"location":"ILoginResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IMainMenuPanel/","title":"IMainMenuPanel.cs Documentation","text":""},{"location":"IMainMenuPanel/#overview","title":"Overview","text":"<p><code>IMainMenuPanel</code> is an interface that defines a contract for main menu panel classes. It includes properties to reference associated panels and user data.</p>"},{"location":"IMainMenuPanel/#properties","title":"Properties","text":"Property Name Description Type <code>LoginMenu</code> The login menu associated with the main menu panel. <code>LoginPanel</code> <code>ProfileMenu</code> The profile menu associated with the main menu panel. <code>ProfilePanel</code> <code>RecoveryMenu</code> The recovery menu associated with the main menu panel. <code>RecoveryPanel</code> <code>RegisterMenu</code> The register menu associated with the main menu panel. <code>RegisterPanel</code> <code>UserData</code> The user data associated with the main menu panel. <code>UserData</code>"},{"location":"IMainMenuPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class MyMainMenuPanel : IMainMenuPanel\n{\n    public LoginPanel LoginMenu { get; }\n    public ProfilePanel ProfileMenu { get; }\n    public RecoveryPanel RecoveryMenu { get; }\n    public RegisterPanel RegisterMenu { get; }\n    public UserData UserData { get; }\n\n    // Implement methods from IPanel\n    public void Show() { }\n    public void Hide() { }\n    public void Lock(object lockerObject) { }\n    public void UnLock(object lockerObject) { }\n}\n</code></pre>"},{"location":"IPanel/","title":"IPanel.cs Documentation","text":""},{"location":"IPanel/#overview","title":"Overview","text":"<p><code>IPanel</code> is a base interface for all UI panels. It combines the capabilities of showing, hiding, and locking UI panels.</p>"},{"location":"IPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class MyPanel : IPanel\n{\n    public void Show()\n    {\n        // Show panel logic\n    }\n\n    public void Hide()\n    {\n        // Hide panel logic\n    }\n\n    public void Lock(object lockerObject)\n    {\n        // Lock panel logic\n    }\n\n    public void UnLock(object lockerObject)\n    {\n        // Unlock panel logic\n    }\n}\n</code></pre>"},{"location":"IPasswordResetResponse/","title":"IPasswordResetResponse Interface Documentation","text":""},{"location":"IPasswordResetResponse/#overview","title":"Overview","text":"<p>The <code>IPasswordResetResponse</code> interface defines the structure for password reset responses in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"IPasswordResetResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login.Abstract\n</code></pre>"},{"location":"IPasswordResetResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IRecoveryPanel/","title":"IRecoveryPanel.cs Documentation","text":""},{"location":"IRecoveryPanel/#overview","title":"Overview","text":"<p><code>IRecoveryPanel</code> is an interface that defines a contract for recovery panel classes. It includes properties to validate email and references to associated panels.</p>"},{"location":"IRecoveryPanel/#properties","title":"Properties","text":"Property Name Description Type <code>IsEmailValid</code> Indicates whether the email is valid. <code>bool</code> <code>LoginPanel</code> The login panel associated with the recovery panel. <code>IPanel</code> <code>RegisterPanel</code> The register panel associated with the recovery panel. <code>IPanel</code>"},{"location":"IRecoveryPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class MyRecoveryPanel : IRecoveryPanel\n{\n    public bool IsEmailValid { get; }\n    public IPanel LoginPanel { get; }\n    public IPanel RegisterPanel { get; }\n\n    // Implement methods from IPanel\n    public void Show() { }\n    public void Hide() { }\n    public void Lock(object lockerObject) { }\n    public void UnLock(object lockerObject) { }\n}\n</code></pre>"},{"location":"IRegisterPanel/","title":"IRegisterPanel.cs Documentation","text":""},{"location":"IRegisterPanel/#overview","title":"Overview","text":"<p><code>IRegisterPanel</code> is an interface that defines a contract for register panel classes. It includes properties to validate email, password, and username, and references to associated panels.</p>"},{"location":"IRegisterPanel/#properties","title":"Properties","text":"Property Name Description Type <code>IsEmailValid</code> Indicates whether the email is valid. <code>bool</code> <code>IsPasswordValid</code> Indicates whether the password is valid. <code>bool</code> <code>IsUserNameValid</code> Indicates whether the username is valid. <code>bool</code> <code>LoginPanel</code> The login panel associated with the register panel. <code>IPanel</code>"},{"location":"IRegisterPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class MyRegisterPanel : IRegisterPanel\n{\n    public bool IsEmailValid { get; }\n    public bool IsPasswordValid { get; }\n    public bool IsUserNameValid { get; }\n    public IPanel LoginPanel { get; }\n\n    // Implement methods from IPanel\n    public void Show() { }\n    public void Hide() { }\n    public void Lock(object lockerObject) { }\n    public void UnLock(object lockerObject) { }\n}\n</code></pre>"},{"location":"IRegisterResponse/","title":"IRegisterResponse Interface Documentation","text":""},{"location":"IRegisterResponse/#overview","title":"Overview","text":"<p>The <code>IRegisterResponse</code> interface defines the structure for register responses in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"IRegisterResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login.Abstract\n</code></pre>"},{"location":"IRegisterResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"IShowable/","title":"IShowable Interface Documentation","text":""},{"location":"IShowable/#overview","title":"Overview","text":"<p>The <code>IShowable</code> interface defines a contract for objects that can be shown within the Flameborn SDK.</p>"},{"location":"IShowable/#interface-definition","title":"Interface Definition","text":"<pre><code>namespace flameborn.Core.Contracts.Abilities\n{\n    /// &lt;summary&gt;\n    /// Defines an interface for objects that can be shown.\n    /// &lt;/summary&gt;\n    public interface IShowAble\n    {\n        /// &lt;summary&gt;\n        /// Shows the object.\n        /// &lt;/summary&gt;\n        void Show();\n    }\n}\n</code></pre>"},{"location":"IShowable/#methods","title":"Methods","text":""},{"location":"IShowable/#public-methods","title":"Public Methods","text":"<ul> <li>Show(): Shows the object.</li> </ul>"},{"location":"IShowable/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to implement the <code>IShowable</code> interface in a concrete class.</p> <pre><code>using flameborn.Core.Contracts.Abilities;\n\npublic class MyShowableObject : IShowAble\n{\n    public void Show()\n    {\n        // Implementation of showing the object\n    }\n}\n</code></pre>"},{"location":"IShowable/#file-location","title":"File Location","text":"<p>This interface is defined in the <code>IShowable.cs</code> file, located in the <code>flameborn.Core.Contracts.Abilities</code> namespace.</p>"},{"location":"IUpdateStatisticsResponse/","title":"IUpdateStatisticsResponse Interface Documentation","text":""},{"location":"IUpdateStatisticsResponse/#overview","title":"Overview","text":"<p>The <code>IUpdateStatisticsResponse</code> interface defines the structure for responses that update statistics data in the Flameborn SDK. This interface extends the <code>IApiResponse</code> interface.</p>"},{"location":"IUpdateStatisticsResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data.Abstract\n</code></pre>"},{"location":"IUpdateStatisticsResponse/#properties","title":"Properties","text":"<p>None.</p>"},{"location":"IUpdateStatisticsResponse/#methods","title":"Methods","text":"<p>None.</p>"},{"location":"IUpdateStatisticsResponse/#references","title":"References","text":"<ul> <li>IApiResponse</li> </ul>"},{"location":"LeaderPanel/","title":"LeaderPanel.cs Documentation","text":""},{"location":"LeaderPanel/#overview","title":"Overview","text":"<p><code>LeaderPanel</code> is a MonoBehaviour class that represents a leader panel in the game UI. It includes methods for initialization and updating.</p>"},{"location":"LeaderPanel/#unity-methods","title":"Unity Methods","text":"Method Name Description Parameters Return Type <code>Start()</code> Called before the first frame update. None <code>void</code> <code>Update()</code> Called once per frame. None <code>void</code>"},{"location":"LeaderPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage : MonoBehaviour\n{\n    private LeaderPanel leaderPanel;\n\n    void Start()\n    {\n        leaderPanel = GetComponent&lt;LeaderPanel&gt;();\n    }\n\n    void Update()\n    {\n        // Custom update logic\n    }\n}\n</code></pre>"},{"location":"LoaderPanel/","title":"LoaderPanel.cs Documentation","text":""},{"location":"LoaderPanel/#overview","title":"Overview","text":"<p><code>LoaderPanel</code> is a serializable class that represents a loader panel in the game UI. It inherits from <code>PanelBase</code> and provides methods to show and hide the loader panel.</p>"},{"location":"LoaderPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage\n{\n    private LoaderPanel loaderPanel;\n\n    public void InitializeLoaderPanel()\n    {\n        loaderPanel = new LoaderPanel();\n    }\n\n    public void ShowLoader()\n    {\n        loaderPanel.Show();\n    }\n\n    public void HideLoader()\n    {\n        loaderPanel.Hide();\n    }\n}\n</code></pre>"},{"location":"LobbyPanel/","title":"LobbyPanel.cs Documentation","text":""},{"location":"LobbyPanel/#overview","title":"Overview","text":"<p><code>LobbyPanel</code> is a serializable class that represents the lobby panel UI. It provides methods to set player data, initialize animations, and override show and hide behaviors.</p>"},{"location":"LobbyPanel/#public-methods","title":"Public Methods","text":"Method Name Description Parameters Return Type <code>SetPlayerData(List&lt;Player&gt; data)</code> Sets the player data in the lobby panel. <code>List&lt;Player&gt; data</code> <code>void</code> <code>Init()</code> Initializes the lobby panel animations. None <code>void</code> <code>Show()</code> Shows the lobby panel and plays animations. None <code>void</code> <code>Hide()</code> Hides the lobby panel and stops animations. None <code>void</code>"},{"location":"LobbyPanel/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage\n{\n    private LobbyPanel lobbyPanel;\n\n    public void SetupLobbyPanel(List&lt;Player&gt; players)\n    {\n        lobbyPanel.SetPlayerData(players);\n        lobbyPanel.Show();\n    }\n}\n</code></pre>"},{"location":"LoginRequest/","title":"LoginRequest Class Documentation","text":""},{"location":"LoginRequest/#overview","title":"Overview","text":"<p>The <code>LoginRequest</code> class represents a request to log in in the Flameborn SDK. This class extends <code>Request&lt;ILoginResponse&gt;</code> and implements the <code>IApiRequest&lt;ILoginResponse&gt;</code> interface.</p>"},{"location":"LoginRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login\n</code></pre>"},{"location":"LoginRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;ILoginResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;ILoginResponse&gt;</code></li> </ul>"},{"location":"LoginRequest/#constructors","title":"Constructors","text":""},{"location":"LoginRequest/#loginrequestiapicontrolleriloginresponse-controller","title":"<code>LoginRequest(IApiController&lt;ILoginResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>LoginRequest</code> class.</p>"},{"location":"LoginRequest/#syntax","title":"Syntax","text":"<pre><code>public LoginRequest(IApiController&lt;ILoginResponse&gt; controller)\n</code></pre>"},{"location":"LoginRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;ILoginResponse&gt;</code> - The API controller used to send the request.</li> </ul>"},{"location":"LoginRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;ILoginResponse&gt; controller = new LoginController();\nLoginRequest loginRequest = new LoginRequest(controller);\n</code></pre>"},{"location":"LoginRequest/#methods","title":"Methods","text":""},{"location":"LoginRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to log in.</p>"},{"location":"LoginRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;ILoginResponse&gt;[] listeners);\n</code></pre>"},{"location":"LoginRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;ILoginResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"LoginRequest/#example_1","title":"Example","text":"<pre><code>loginRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"LoginRequest/#references","title":"References","text":"<ul> <li>ILoginResponse</li> <li>IApiController</li> </ul>"},{"location":"LoginResponse/","title":"LoginResponse Class Documentation","text":""},{"location":"LoginResponse/#overview","title":"Overview","text":"<p>The <code>LoginResponse</code> class represents the response for a login request in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>ILoginResponse</code> interface.</p>"},{"location":"LoginResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login.Entity\n</code></pre>"},{"location":"LoginResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>ILoginResponse</code></li> </ul>"},{"location":"LoginResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"LoginResponse/#properties","title":"Properties","text":""},{"location":"LoginResponse/#isaccountlogged","title":"<code>IsAccountLogged</code>","text":"<p>Gets or sets a value indicating whether the account is logged in.</p>"},{"location":"LoginResponse/#syntax","title":"Syntax","text":"<pre><code>public bool IsAccountLogged { get; set; }\n</code></pre>"},{"location":"LoginResponse/#newlycreated","title":"<code>NewlyCreated</code>","text":"<p>Gets or sets a value indicating whether the account is newly created.</p>"},{"location":"LoginResponse/#syntax_1","title":"Syntax","text":"<pre><code>public bool NewlyCreated { get; set; }\n</code></pre>"},{"location":"LoginResponse/#playfabid","title":"<code>PlayFabId</code>","text":"<p>Gets or sets the PlayFab ID associated with the account.</p>"},{"location":"LoginResponse/#syntax_2","title":"Syntax","text":"<pre><code>public string PlayFabId { get; set; }\n</code></pre>"},{"location":"LoginResponse/#constructors","title":"Constructors","text":""},{"location":"LoginResponse/#loginresponse","title":"<code>LoginResponse()</code>","text":"<p>Initializes a new instance of the <code>LoginResponse</code> class.</p>"},{"location":"LoginResponse/#syntax_3","title":"Syntax","text":"<pre><code>public LoginResponse()\n</code></pre>"},{"location":"LoginResponse/#methods","title":"Methods","text":""},{"location":"LoginResponse/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"LoginResponse/#syntax_4","title":"Syntax","text":"<pre><code>public void SetResponse&lt;T&gt;(bool isSuccess, bool isAccountLogged, bool isNewly, string fabId, T response, string message = \"\");\n</code></pre>"},{"location":"LoginResponse/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>isAccountLogged: <code>bool</code> - Indicates if the account is logged in.</li> <li>isNewly: <code>bool</code> - Indicates if the account is newly created.</li> <li>fabId: <code>string</code> - The PlayFab ID associated with the account.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"LoginResponse/#example","title":"Example","text":"<pre><code>LoginResponse loginResponse = new LoginResponse();\nloginResponse.SetResponse(true, true, false, \"PlayFab123\", new object(), \"Success\");\n// Use loginResponse in your logic\n</code></pre>"},{"location":"LoginResponse/#references","title":"References","text":"<ul> <li>ILoginResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"MatchMakingManager/","title":"MatchMakingManager.cs Documentation","text":""},{"location":"MatchMakingManager/#overview","title":"Overview","text":"<p><code>MatchMakingManager</code> is a singleton class that manages matchmaking operations, including creating match tickets, finding matches, and handling match info responses.</p>"},{"location":"MatchMakingManager/#public-methods","title":"Public Methods","text":"Method Name Description Parameters Return Type <code>MatchMakingManager()</code> Initializes a new instance of the <code>MatchMakingManager</code> class. None Constructor <code>NewMatch()</code> Initiates a new match if no ticket response is present. None <code>void</code>"},{"location":"MatchMakingManager/#private-methods","title":"Private Methods","text":"Method Name Description Parameters Return Type <code>CreateTicket()</code> Creates a new matchmaking ticket. None <code>void</code> <code>FindMatch()</code> Starts the process of finding a match. None <code>void</code> <code>GetMatchInfo()</code> Retrieves match information. None <code>void</code> <code>MatchSearchingCoroutine()</code> Coroutine that repeatedly attempts to find a match. None <code>IEnumerator</code> <code>OnGetMatchInfoResponse_EventListener(IGetMatchInfoResponse response)</code> Event listener for match info response. <code>IGetMatchInfoResponse response</code> <code>void</code> <code>OnGetFindMatchResponse_EventListener(IFindMatchResponse response)</code> Event listener for find match response. <code>IFindMatchResponse response</code> <code>void</code> <code>OnGetMatchTicketResponse_EventListener(ICreateMatchTicketResponse response)</code> Event listener for match ticket response. <code>ICreateMatchTicketResponse response</code> <code>void</code>"},{"location":"MatchMakingManager/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage\n{\n    public void InitializeMatchMakingManager()\n    {\n        MatchMakingManager matchMakingManager = new MatchMakingManager();\n        matchMakingManager.NewMatch();\n    }\n}\n</code></pre>"},{"location":"PanelBase/","title":"PanelBase.cs Documentation","text":""},{"location":"PanelBase/#overview","title":"Overview","text":"<p><code>PanelBase</code> is an abstract class that serves as a base for all UI panels. It provides methods to show, hide, lock, and unlock panels.</p>"},{"location":"PanelBase/#public-methods","title":"Public Methods","text":"Method Name Description Parameters Return Type <code>Show()</code> Shows the panel if it is not locked. None <code>void</code> <code>Hide()</code> Hides the panel if it is not locked. None <code>void</code> <code>Lock(object lockerObject)</code> Locks the panel with the specified object. <code>object lockerObject</code> <code>void</code> <code>UnLock(object lockerObject)</code> Unlocks the panel if the specified object matches the lock object. <code>object lockerObject</code> <code>void</code>"},{"location":"PanelBase/#example-usage","title":"Example Usage","text":"<pre><code>public class MyPanel : PanelBase\n{\n    public override void Show()\n    {\n        // Show panel logic\n    }\n\n    public override void Hide()\n    {\n        // Hide panel logic\n    }\n\n    public override void Lock(object lockerObject)\n    {\n        // Lock panel logic\n    }\n\n    public override void UnLock(object lockerObject)\n    {\n        // Unlock panel logic\n    }\n}\n</code></pre>"},{"location":"PasswordResetController_Playfab/","title":"PasswordResetController_Playfab Class Documentation","text":""},{"location":"PasswordResetController_Playfab/#overview","title":"Overview","text":"<p>The <code>PasswordResetController_Playfab</code> class manages the resetting of passwords via PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IPasswordResetResponse&gt;</code> class and implements the <code>IApiController&lt;IPasswordResetResponse&gt;</code> interface.</p>"},{"location":"PasswordResetController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Login.Abstract;\nusing flameborn.Sdk.Requests.Login.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.ClientModels;\n\nnamespace flameborn.Sdk.Controllers.Login\n{\n    /// &lt;summary&gt;\n    /// Controller for resetting password via PlayFab.\n    /// &lt;/summary&gt;\n    public class PasswordResetController_Playfab : Controller&lt;IPasswordResetResponse&gt;, IApiController&lt;IPasswordResetResponse&gt;\n    {\n        #region Fields\n\n        private string email;\n        private event Action&lt;IPasswordResetResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"PasswordResetController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"email\"&gt;The email address associated with the account.&lt;/param&gt;\n        public PasswordResetController_Playfab(string email)\n        {\n            this.email = email;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to reset the password.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IPasswordResetResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (string.IsNullOrEmpty(email)) \n            { \n                errorLog = $\"{nameof(email)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n            var request = TakeRequest();\n            PlayFabClientAPI.SendAccountRecoveryEmail(request, OnGetLoginResult_EventListener, OnError);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the password reset result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the password reset request.&lt;/param&gt;\n        private void OnGetLoginResult_EventListener(SendAccountRecoveryEmailResult result)\n        {\n            var response = new PasswordResetResponse();\n            response.SetResponse(true, result, \"Password reset e-mail sent.\");\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the password reset request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new PasswordResetResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for sending the account recovery email.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to send the account recovery email.&lt;/returns&gt;\n        private SendAccountRecoveryEmailRequest TakeRequest()\n        {\n            return new SendAccountRecoveryEmailRequest\n            {\n                Email = email,\n                TitleId = PlayFabSettings.TitleId\n            };\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"PasswordResetController_Playfab/#fields","title":"Fields","text":"<ul> <li>email: The email address associated with the account.</li> </ul>"},{"location":"PasswordResetController_Playfab/#methods","title":"Methods","text":""},{"location":"PasswordResetController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to reset the password. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"PasswordResetController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for sending the account recovery email.</li> <li>OnGetLoginResult_EventListener(SendAccountRecoveryEmailResult result): Handles the event when the password reset result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"PasswordResetController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>PasswordResetController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.Login;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new PasswordResetController_Playfab(\"example@example.com\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Password reset email sent successfully.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to send password reset email: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"PasswordResetController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IPasswordResetResponse</code> interface, refer to the IPasswordResetResponse documentation.</p>"},{"location":"PasswordResetController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>PasswordResetController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Login</code> namespace.</p>"},{"location":"PasswordResetRequest/","title":"PasswordResetRequest Class Documentation","text":""},{"location":"PasswordResetRequest/#overview","title":"Overview","text":"<p>The <code>PasswordResetRequest</code> class represents a request to reset a password in the Flameborn SDK. This class extends <code>Request&lt;IPasswordResetResponse&gt;</code> and implements the <code>IApiRequest&lt;IPasswordResetResponse&gt;</code> interface.</p>"},{"location":"PasswordResetRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login\n</code></pre>"},{"location":"PasswordResetRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;IPasswordResetResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;IPasswordResetResponse&gt;</code></li> </ul>"},{"location":"PasswordResetRequest/#constructors","title":"Constructors","text":""},{"location":"PasswordResetRequest/#passwordresetrequestiapicontrolleripasswordresetresponse-controller","title":"<code>PasswordResetRequest(IApiController&lt;IPasswordResetResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>PasswordResetRequest</code> class.</p>"},{"location":"PasswordResetRequest/#syntax","title":"Syntax","text":"<pre><code>public PasswordResetRequest(IApiController&lt;IPasswordResetResponse&gt; controller)\n</code></pre>"},{"location":"PasswordResetRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;IPasswordResetResponse&gt;</code> - The API controller used to send the request.</li> </ul>"},{"location":"PasswordResetRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;IPasswordResetResponse&gt; controller = new PasswordResetController();\nPasswordResetRequest passwordResetRequest = new PasswordResetRequest(controller);\n</code></pre>"},{"location":"PasswordResetRequest/#methods","title":"Methods","text":""},{"location":"PasswordResetRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to reset a password.</p>"},{"location":"PasswordResetRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;IPasswordResetResponse&gt;[] listeners);\n</code></pre>"},{"location":"PasswordResetRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;IPasswordResetResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"PasswordResetRequest/#example_1","title":"Example","text":"<pre><code>passwordResetRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"PasswordResetRequest/#references","title":"References","text":"<ul> <li>IPasswordResetResponse</li> <li>IApiController</li> </ul>"},{"location":"PasswordResetResponse/","title":"PasswordResetResponse Class Documentation","text":""},{"location":"PasswordResetResponse/#overview","title":"Overview","text":"<p>The <code>PasswordResetResponse</code> class represents the response for a password reset request in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>IPasswordResetResponse</code> interface.</p>"},{"location":"PasswordResetResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login.Entity\n</code></pre>"},{"location":"PasswordResetResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>IPasswordResetResponse</code></li> </ul>"},{"location":"PasswordResetResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"PasswordResetResponse/#description","title":"Description","text":"<p>This class serves as a response entity for password reset requests.</p>"},{"location":"PasswordResetResponse/#example","title":"Example","text":"<pre><code>PasswordResetResponse passwordResetResponse = new PasswordResetResponse();\n// Use passwordResetResponse in your logic\n</code></pre>"},{"location":"PasswordResetResponse/#references","title":"References","text":"<ul> <li>IPasswordResetResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"PhotonManager/","title":"PhotonManager Documentation","text":""},{"location":"PhotonManager/#overview","title":"Overview","text":"<p><code>PhotonManager</code> is a class responsible for managing Photon networking operations in the game. It handles the connection to Photon servers, room creation and management, and player synchronization. This class ensures seamless multiplayer gameplay by managing player connections and game states.</p>"},{"location":"PhotonManager/#table-of-contents","title":"Table of Contents","text":"<ul> <li>PhotonManager</li> <li>Fields</li> <li>Methods<ul> <li>Awake</li> <li>Start</li> <li>Init</li> <li>InitializePlayerList</li> <li>ShowLobby</li> <li>ConnectCheck</li> <li>PlayerLeft</li> <li>JoinOrCreateRoom</li> <li>ConnectToPhoton</li> <li>MatchCanceled</li> <li>LoadMainMenu</li> <li>OnConnectedToMaster</li> <li>OnLeftRoom</li> <li>OnLeftLobby</li> <li>OnCreatedRoom</li> <li>OnCreateRoomFailed</li> <li>OnJoinedRoom</li> <li>OnJoinRoomFailed</li> <li>OnDisconnected</li> <li>OnPlayerEnteredRoom</li> <li>OnPlayerLeftRoom</li> <li>RPC_StartMatch</li> <li>StartMatch</li> </ul> </li> <li>Usage Example</li> <li>Related Documentation</li> </ul>"},{"location":"PhotonManager/#fields","title":"Fields","text":"Field Type Description <code>instance</code> <code>PhotonManager</code> Singleton instance of <code>PhotonManager</code>. <code>isReady</code> <code>bool</code> Indicates if the manager is ready. <code>isConnecting</code> <code>bool</code> Indicates if a connection attempt is in progress. <code>isMatchStop</code> <code>bool</code> Indicates if the match has been stopped. <code>isMatchStart</code> <code>bool</code> Indicates if the match has started. <code>isConnectSuccess</code> <code>bool</code> Indicates if the connection was successful. <code>matchId</code> <code>string</code> ID of the current match. <code>userName</code> <code>string</code> User name of the local player. <code>roomController</code> <code>PhotonRoomController</code> Controller for managing Photon rooms. <code>uiManager</code> <code>UiManager</code> Manager for handling UI operations. <code>playersInRoom</code> <code>List&lt;Player&gt;</code> List of players currently in the room."},{"location":"PhotonManager/#methods","title":"Methods","text":""},{"location":"PhotonManager/#awake","title":"Awake","text":"<p>Called when the script instance is being loaded.</p> <pre><code>private void Awake()\n</code></pre>"},{"location":"PhotonManager/#start","title":"Start","text":"<p>Called on the first frame the script is active.</p> <pre><code>private void Start()\n</code></pre>"},{"location":"PhotonManager/#init","title":"Init","text":"<p>Initializes the <code>PhotonManager</code> with match ID and user name.</p> <pre><code>public void Init(string matchID, string userName)\n</code></pre> <p>Parameters: - <code>matchID</code>: The match ID. - <code>userName</code>: The user name.</p>"},{"location":"PhotonManager/#initializeplayerlist","title":"InitializePlayerList","text":"<p>Initializes the player list.</p> <pre><code>private void InitializePlayerList()\n</code></pre>"},{"location":"PhotonManager/#showlobby","title":"ShowLobby","text":"<p>Shows the lobby if enough players are present.</p> <pre><code>public void ShowLobby()\n</code></pre>"},{"location":"PhotonManager/#connectcheck","title":"ConnectCheck","text":"<p>Checks if the connection is successful.</p> <pre><code>public void ConnectCheck()\n</code></pre>"},{"location":"PhotonManager/#playerleft","title":"PlayerLeft","text":"<p>Handles the event when a player leaves the room.</p> <pre><code>private void PlayerLeft(Player otherPlayer)\n</code></pre> <p>Parameters: - <code>otherPlayer</code>: The player who left the room.</p>"},{"location":"PhotonManager/#joinorcreateroom","title":"JoinOrCreateRoom","text":"<p>Joins or creates a room.</p> <pre><code>private void JoinOrCreateRoom()\n</code></pre>"},{"location":"PhotonManager/#connecttophoton","title":"ConnectToPhoton","text":"<p>Connects to Photon.</p> <pre><code>private void ConnectToPhoton()\n</code></pre>"},{"location":"PhotonManager/#matchcanceled","title":"MatchCanceled","text":"<p>Cancels the match.</p> <pre><code>public void MatchCanceled(string message)\n</code></pre> <p>Parameters: - <code>message</code>: The message to display.</p>"},{"location":"PhotonManager/#loadmainmenu","title":"LoadMainMenu","text":"<p>Loads the main menu scene.</p> <pre><code>public void LoadMainMenu()\n</code></pre>"},{"location":"PhotonManager/#onconnectedtomaster","title":"OnConnectedToMaster","text":"<p>Called when the connection to the master server is established.</p> <pre><code>public override void OnConnectedToMaster()\n</code></pre>"},{"location":"PhotonManager/#onleftroom","title":"OnLeftRoom","text":"<p>Called when the local player leaves the room.</p> <pre><code>public override void OnLeftRoom()\n</code></pre>"},{"location":"PhotonManager/#onleftlobby","title":"OnLeftLobby","text":"<p>Called when the local player leaves the lobby.</p> <pre><code>public override void OnLeftLobby()\n</code></pre>"},{"location":"PhotonManager/#oncreatedroom","title":"OnCreatedRoom","text":"<p>Called when a room is successfully created.</p> <pre><code>public override void OnCreatedRoom()\n</code></pre>"},{"location":"PhotonManager/#oncreateroomfailed","title":"OnCreateRoomFailed","text":"<p>Called when a room creation attempt fails.</p> <pre><code>public override void OnCreateRoomFailed(short returnCode, string message)\n</code></pre>"},{"location":"PhotonManager/#onjoinedroom","title":"OnJoinedRoom","text":"<p>Called when the local player successfully joins a room.</p> <pre><code>public override void OnJoinedRoom()\n</code></pre>"},{"location":"PhotonManager/#onjoinroomfailed","title":"OnJoinRoomFailed","text":"<p>Called when a room join attempt fails.</p> <pre><code>public override void OnJoinRoomFailed(short returnCode, string message)\n</code></pre>"},{"location":"PhotonManager/#ondisconnected","title":"OnDisconnected","text":"<p>Called when the local player is disconnected from the Photon server.</p> <pre><code>public override void OnDisconnected(DisconnectCause cause)\n</code></pre>"},{"location":"PhotonManager/#onplayerenteredroom","title":"OnPlayerEnteredRoom","text":"<p>Called when a new player enters the room.</p> <pre><code>public override void OnPlayerEnteredRoom(Player newPlayer)\n</code></pre>"},{"location":"PhotonManager/#onplayerleftroom","title":"OnPlayerLeftRoom","text":"<p>Called when a player leaves the room.</p> <pre><code>public override void OnPlayerLeftRoom(Player otherPlayer)\n</code></pre>"},{"location":"PhotonManager/#rpc_startmatch","title":"RPC_StartMatch","text":"<p>Remote procedure call to start the match.</p> <pre><code>[PunRPC]\nprivate void RPC_StartMatch()\n</code></pre>"},{"location":"PhotonManager/#startmatch","title":"StartMatch","text":"<p>Starts the match if all players are ready.</p> <pre><code>public void StartMatch()\n</code></pre>"},{"location":"PhotonManager/#usage-example","title":"Usage Example","text":"<pre><code>// Initialize PhotonManager\nPhotonManager.Instance.Init(\"match123\", \"Player1\");\n\n// Check if the local player is the master client\nif (PhotonManager.Instance.IsMasterClient())\n{\n    Debug.Log(\"You are the master client.\");\n}\n\n// Connect to Photon\nPhotonManager.Instance.ConnectToPhoton();\n</code></pre>"},{"location":"PhotonManager/#related-documentation","title":"Related Documentation","text":"<ul> <li>PhotonRoomController</li> </ul>"},{"location":"PhotonRoomController/","title":"PhotonRoomController Documentation","text":""},{"location":"PhotonRoomController/#overview","title":"Overview","text":"<p><code>PhotonRoomController</code> is a class responsible for managing Photon rooms. It provides methods for creating and joining rooms, as well as checking the master client status.</p>"},{"location":"PhotonRoomController/#table-of-contents","title":"Table of Contents","text":"<ul> <li>PhotonRoomController</li> <li>Methods<ul> <li>CreateOrJoinRoom</li> <li>IsMasterClient</li> </ul> </li> <li>Usage Example</li> <li>Related Documentation</li> </ul>"},{"location":"PhotonRoomController/#methods","title":"Methods","text":""},{"location":"PhotonRoomController/#createorjoinroom","title":"CreateOrJoinRoom","text":"<p>Creates or joins a Photon room with the specified parameters.</p> <pre><code>public void CreateOrJoinRoom(string roomName, byte maxPlayers, string userName)\n</code></pre> <p>Parameters: - <code>roomName</code>: The name of the room. - <code>maxPlayers</code>: The maximum number of players allowed in the room. - <code>userName</code>: The user name to set for the player.</p>"},{"location":"PhotonRoomController/#ismasterclient","title":"IsMasterClient","text":"<p>Determines whether the local player is the master client.</p> <pre><code>public bool IsMasterClient()\n</code></pre> <p>Returns: - <code>true</code> if the local player is the master client; otherwise, <code>false</code>.</p>"},{"location":"PhotonRoomController/#usage-example","title":"Usage Example","text":"<pre><code>PhotonRoomController roomController = new PhotonRoomController();\nroomController.CreateOrJoinRoom(\"room123\", 4, \"Player1\");\n\nif (roomController.IsMasterClient())\n{\n    Debug.Log(\"You are the master client.\");\n}\n</code></pre>"},{"location":"PhotonRoomController/#related-documentation","title":"Related Documentation","text":"<ul> <li>PhotonManager</li> </ul>"},{"location":"PlayfabManager/","title":"PlayfabManager Class Documentation","text":""},{"location":"PlayfabManager/#overview","title":"Overview","text":"<p>The <code>PlayfabManager</code> class manages PlayFab operations within the Flameborn SDK. This class is a singleton derived from <code>MonoBehaviourSingleton</code> and implements the <code>IManager</code> interface.</p>"},{"location":"PlayfabManager/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Core.Managers;\nusing flameborn.Core.Managers.Abstract;\nusing flameborn.Sdk.Configurations;\nusing HF.Library.Utilities.Singleton;\nusing HF.Logger;\nusing PlayFab;\nusing PlayFab.ClientModels;\nusing UnityEngine.Events;\n\nnamespace flameborn.Sdk.Managers\n{\n    /// &lt;summary&gt;\n    /// Manager for handling PlayFab operations.\n    /// &lt;/summary&gt;\n    public class PlayfabManager : MonoBehaviourSingleton&lt;PlayfabManager&gt;, IManager\n    {\n        #region Fields\n\n        private PlayfabConfiguration configuration = null;\n        private UnityEvent&lt;LoginResult&gt; event_LoginCompleted;\n\n        #endregion\n\n        #region Properties\n\n        /// &lt;summary&gt;\n        /// Gets a value indicating whether the configuration is loaded.\n        /// &lt;/summary&gt;\n        public bool IsLoaded { get; private set; } = false;\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Called on the first frame the script is active.\n        /// &lt;/summary&gt;\n        private void Start()\n        {\n            GameManager.Instance.SetManager(this);\n            FindConfiguration();\n        }\n\n        /// &lt;summary&gt;\n        /// Finds and sets the PlayFab configuration.\n        /// &lt;/summary&gt;\n        private void FindConfiguration()\n        {\n            var configurationManager = GameManager.Instance.GetManager&lt;ConfigurationManager&gt;();\n            if (configurationManager.IsContain)\n            {\n                configurationManager.Instance.LoadConfiguration&lt;PlayfabConfiguration&gt;(SetConfigurationFile);\n                return;\n            }\n\n            Invoke(nameof(FindConfiguration), 2f);\n        }\n\n        /// &lt;summary&gt;\n        /// Sets the PlayFab configuration file.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"configuration\"&gt;The PlayFab configuration to set.&lt;/param&gt;\n        private void SetConfigurationFile(PlayfabConfiguration configuration)\n        {\n            this.configuration = configuration;\n            IsLoaded = configuration != null;\n\n            if (string.IsNullOrEmpty(PlayFabSettings.TitleId))\n            {\n                PlayFabSettings.TitleId = configuration.TitleId;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Unlinks the Android device ID.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"deviceId\"&gt;The device ID to unlink.&lt;/param&gt;\n        /// &lt;param name=\"listener\"&gt;The listener to call when the operation is complete.&lt;/param&gt;\n        public void UnlinkAndroidDeviceId(string deviceId, Action&lt;UnlinkAndroidDeviceIDResult&gt; listener)\n        {\n#if UNITY_ANDROID\n            var request = new UnlinkAndroidDeviceIDRequest\n            {\n                AndroidDeviceId = deviceId\n            };\n            PlayFabClientAPI.UnlinkAndroidDeviceID(request, listener, Event_OnError);\n#endif\n        }\n\n        /// &lt;summary&gt;\n        /// Unlinks the iOS device ID.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"deviceId\"&gt;The device ID to unlink.&lt;/param&gt;\n        /// &lt;param name=\"listener\"&gt;The listener to call when the operation is complete.&lt;/param&gt;\n        public void UnlinkIOSDeviceId(string deviceId, Action&lt;UnlinkIOSDeviceIDResult&gt; listener)\n        {\n#if UNITY_IOS\n            var request = new UnlinkIOSDeviceIDRequest\n            {\n                DeviceId = deviceId\n            };\n            PlayFabClientAPI.UnlinkIOSDeviceID(request, listener, Event_OnError);\n#endif\n        }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during PlayFab operations.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void Event_OnError(PlayFabError error)\n        {\n            HFLogger.LogError(error, error.ApiEndpoint, error.GenerateErrorReport());\n            var uiManager = GameManager.Instance.GetManager&lt;UiManager&gt;();\n            if (uiManager.IsContain)\n            {\n                uiManager.Instance.alert.Show(\"Error\", error.ErrorMessage);\n            }\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"PlayfabManager/#fields","title":"Fields","text":"<ul> <li>configuration: An instance of the <code>PlayfabConfiguration</code> class representing the PlayFab configuration.</li> <li>event_LoginCompleted: An event triggered when login is completed.</li> </ul>"},{"location":"PlayfabManager/#properties","title":"Properties","text":"<ul> <li>IsLoaded: Gets a value indicating whether the configuration is loaded.</li> </ul>"},{"location":"PlayfabManager/#methods","title":"Methods","text":""},{"location":"PlayfabManager/#public-methods","title":"Public Methods","text":"<ul> <li>Start(): Called on the first frame the script is active. Sets the manager and attempts to find the PlayFab configuration.</li> <li>UnlinkAndroidDeviceId(string deviceId, Action listener): Unlinks the Android device ID. <li>UnlinkIOSDeviceId(string deviceId, Action listener): Unlinks the iOS device ID."},{"location":"PlayfabManager/#private-methods","title":"Private Methods","text":"<ul> <li>FindConfiguration(): Finds and sets the PlayFab configuration.</li> <li>SetConfigurationFile(PlayfabConfiguration configuration): Sets the PlayFab configuration file.</li> <li>Event_OnError(PlayFabError error): Handles errors that occur during PlayFab operations.</li> </ul>"},{"location":"PlayfabManager/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>PlayfabManager</code> class in a Unity project.</p> <pre><code>using UnityEngine;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        PlayfabManager.Instance.UnlinkAndroidDeviceId(\"device-id\", result =&gt; \n        {\n            Debug.Log(\"Unlinked Android Device ID\");\n        });\n    }\n}\n</code></pre>"},{"location":"PlayfabManager/#see-also","title":"See Also","text":"<p>For more information on the <code>IManager</code> interface, refer to the IManager documentation.</p>"},{"location":"PlayfabManager/#file-location","title":"File Location","text":"<p>This class is defined in the <code>PlayfabManager.cs</code> file, located in the <code>flameborn.Sdk.Managers</code> namespace.</p>"},{"location":"RegisterController_Playfab/","title":"RegisterController_Playfab Class Documentation","text":""},{"location":"RegisterController_Playfab/#overview","title":"Overview","text":"<p>The <code>RegisterController_Playfab</code> class manages the registration of new accounts via PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IRegisterResponse&gt;</code> class and implements the <code>IApiController&lt;IRegisterResponse&gt;</code> interface.</p>"},{"location":"RegisterController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Core.Managers;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Managers;\nusing flameborn.Sdk.Requests.Login.Abstract;\nusing flameborn.Sdk.Requests.Login.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.ClientModels;\n\nnamespace flameborn.Sdk.Controllers.Login\n{\n    /// &lt;summary&gt;\n    /// Controller for registering a new account via PlayFab.\n    /// &lt;/summary&gt;\n    public class RegisterController_Playfab : Controller&lt;IRegisterResponse&gt;, IApiController&lt;IRegisterResponse&gt;\n    {\n        #region Fields\n\n        private string email;\n        private string password;\n        private string userName;\n        private event Action&lt;IRegisterResponse&gt; onGetResult;\n\n        #endregion\n\n        #region Constructors\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"RegisterController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"email\"&gt;The email address for the new account.&lt;/param&gt;\n        /// &lt;param name=\"password\"&gt;The password for the new account.&lt;/param&gt;\n        /// &lt;param name=\"userName\"&gt;The user name for the new account.&lt;/param&gt;\n        public RegisterController_Playfab(string email, string password, string userName)\n        {\n            this.email = email;\n            this.password = password;\n            this.userName = userName;\n        }\n\n        #endregion\n\n        #region Methods\n\n        /// &lt;summary&gt;\n        /// Sends the request to register a new account.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IRegisterResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (string.IsNullOrEmpty(email)) \n            { \n                errorLog = $\"{nameof(email)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(password) || password.Length &lt; 6) \n            { \n                errorLog = $\"{nameof(password)} is null or empty.\"; \n            }\n            if (string.IsNullOrEmpty(userName)) \n            { \n                errorLog = $\"{nameof(userName)} is null or empty.\"; \n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n            var request = TakeRequest();\n            PlayFabClientAPI.AddUsernamePassword(request, OnGetLoginResult_EventListener, OnError);\n        }\n\n        /// &lt;summary&gt;\n        /// Takes the request for adding a username and password.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;The request to add a username and password.&lt;/returns&gt;\n        private AddUsernamePasswordRequest TakeRequest()\n        {\n            return new AddUsernamePasswordRequest\n            {\n                Email = email,\n                Password = password,\n                Username = userName\n            };\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the registration result is received.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the registration request.&lt;/param&gt;\n        private void OnGetLoginResult_EventListener(AddUsernamePasswordResult result)\n        {\n            var response = new RegisterResponse();\n            response.SetResponse(true, result, \"You are registered.\");\n            onGetResult?.Invoke(response);\n\n            var account = GameManager.Instance.GetManager&lt;AccountManager&gt;().Instance.Account;\n            var PlayfabManager = GameManager.Instance.GetManager&lt;PlayfabManager&gt;().Instance;\n\n#if UNITY_ANDROID\n            PlayfabManager.UnlinkAndroidDeviceId(account.DeviceId, UnlinkDeviceId);\n#endif\n#if UNITY_IOS\n            PlayfabManager.UnlinkIOSDeviceId(account.DeviceId, UnlinkDeviceId);\n#endif\n        }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the Android device ID is unlinked.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the unlinking request.&lt;/param&gt;\n        private void UnlinkDeviceId(UnlinkAndroidDeviceIDResult result) { }\n\n        /// &lt;summary&gt;\n        /// Handles the event when the iOS device ID is unlinked.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"result\"&gt;The result of the unlinking request.&lt;/param&gt;\n        private void UnlinkDeviceId(UnlinkIOSDeviceIDResult result) { }\n\n        /// &lt;summary&gt;\n        /// Handles errors that occur during the registration request.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"error\"&gt;The error that occurred.&lt;/param&gt;\n        private void OnError(PlayFabError error)\n        {\n            var response = new RegisterResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"RegisterController_Playfab/#fields","title":"Fields","text":"<ul> <li>email: The email address for the new account.</li> <li>password: The password for the new account.</li> <li>userName: The user name for the new account.</li> </ul>"},{"location":"RegisterController_Playfab/#methods","title":"Methods","text":""},{"location":"RegisterController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to register a new account via PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"RegisterController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for adding a username and password.</li> <li>OnGetLoginResult_EventListener(AddUsernamePasswordResult result): Handles the event when the registration result is received.</li> <li>UnlinkDeviceId(UnlinkAndroidDeviceIDResult result): Handles the event when the Android device ID is unlinked.</li> <li>UnlinkDeviceId(UnlinkIOSDeviceIDResult result): Handles the event when the iOS device ID is unlinked.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"RegisterController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>RegisterController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.Login;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new RegisterController_Playfab(\"example@example.com\", \"password123\", \"Player1\");\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Registration succeeded.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to register: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"RegisterController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IRegisterResponse</code> interface, refer to the IRegisterResponse documentation.</p>"},{"location":"RegisterController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>RegisterController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Login</code> namespace.</p>"},{"location":"RegisterRequest/","title":"RegisterRequest Class Documentation","text":""},{"location":"RegisterRequest/#overview","title":"Overview","text":"<p>The <code>RegisterRequest</code> class represents a request to register a new account in the Flameborn SDK. This class extends <code>Request&lt;IRegisterResponse&gt;</code> and implements the <code>IApiRequest&lt;IRegisterResponse&gt;</code> interface.</p>"},{"location":"RegisterRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login\n</code></pre>"},{"location":"RegisterRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;IRegisterResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;IRegisterResponse&gt;</code></li> </ul>"},{"location":"RegisterRequest/#constructors","title":"Constructors","text":""},{"location":"RegisterRequest/#registerrequestiapicontrolleriregisterresponse-controller","title":"<code>RegisterRequest(IApiController&lt;IRegisterResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>RegisterRequest</code> class.</p>"},{"location":"RegisterRequest/#syntax","title":"Syntax","text":"<pre><code>public RegisterRequest(IApiController&lt;IRegisterResponse&gt; controller)\n</code></pre>"},{"location":"RegisterRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;IRegisterResponse&gt;</code> - The API controller used to send the request.</li> </ul>"},{"location":"RegisterRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;IRegisterResponse&gt; controller = new RegisterController();\nRegisterRequest registerRequest = new RegisterRequest(controller);\n</code></pre>"},{"location":"RegisterRequest/#methods","title":"Methods","text":""},{"location":"RegisterRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to register a new account.</p>"},{"location":"RegisterRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;IRegisterResponse&gt;[] listeners);\n</code></pre>"},{"location":"RegisterRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;IRegisterResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"RegisterRequest/#example_1","title":"Example","text":"<pre><code>registerRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"RegisterRequest/#references","title":"References","text":"<ul> <li>IRegisterResponse</li> <li>IApiController</li> </ul>"},{"location":"RegisterResponse/","title":"RegisterResponse Class Documentation","text":""},{"location":"RegisterResponse/#overview","title":"Overview","text":"<p>The <code>RegisterResponse</code> class represents the response for a register request in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>IRegisterResponse</code> interface.</p>"},{"location":"RegisterResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Login.Entity\n</code></pre>"},{"location":"RegisterResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>IRegisterResponse</code></li> </ul>"},{"location":"RegisterResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"RegisterResponse/#description","title":"Description","text":"<p>This class serves as a response entity for register requests.</p>"},{"location":"RegisterResponse/#example","title":"Example","text":"<pre><code>RegisterResponse registerResponse = new RegisterResponse();\n// Use registerResponse in your logic\n</code></pre>"},{"location":"RegisterResponse/#references","title":"References","text":"<ul> <li>IRegisterResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"Request/","title":"Request Class Documentation","text":""},{"location":"Request/#overview","title":"Overview","text":"<p>The <code>Request&lt;T&gt;</code> class represents a base class for requests in the Flameborn SDK. This class implements the <code>IApiRequest&lt;T&gt;</code> interface.</p>"},{"location":"Request/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests\n</code></pre>"},{"location":"Request/#properties","title":"Properties","text":""},{"location":"Request/#controller","title":"<code>Controller</code>","text":"<p>Gets or sets the API controller for the request.</p>"},{"location":"Request/#syntax","title":"Syntax","text":"<pre><code>protected IApiController&lt;T&gt; Controller { get; set; }\n</code></pre>"},{"location":"Request/#constructors","title":"Constructors","text":""},{"location":"Request/#requestiapicontrollert-controller","title":"<code>Request(IApiController&lt;T&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>Request&lt;T&gt;</code> class.</p>"},{"location":"Request/#syntax_1","title":"Syntax","text":"<pre><code>protected Request(IApiController&lt;T&gt; controller)\n</code></pre>"},{"location":"Request/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;T&gt;</code> - The API controller for the request.</li> </ul>"},{"location":"Request/#example","title":"Example","text":"<pre><code>public class MyRequest : Request&lt;MyResponse&gt;\n{\n    public MyRequest(IApiController&lt;MyResponse&gt; controller) : base(controller) { }\n\n    public override void SendRequest(out string errorLog, params Action&lt;MyResponse&gt;[] listeners)\n    {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"Request/#methods","title":"Methods","text":""},{"location":"Request/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request.</p>"},{"location":"Request/#syntax_2","title":"Syntax","text":"<pre><code>public abstract void SendRequest(out string errorLog, params Action&lt;T&gt;[] listeners);\n</code></pre>"},{"location":"Request/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;T&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"Request/#references","title":"References","text":"<ul> <li>IApiController</li> <li>IApiRequest</li> </ul>"},{"location":"ResponseEntity/","title":"ResponseEntity Class Documentation","text":""},{"location":"ResponseEntity/#overview","title":"Overview","text":"<p>The <code>ResponseEntity</code> class represents a base response entity in the Flameborn SDK. This class implements the <code>IApiResponse</code> interface.</p>"},{"location":"ResponseEntity/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Entity\n</code></pre>"},{"location":"ResponseEntity/#properties","title":"Properties","text":""},{"location":"ResponseEntity/#isrequestsuccess","title":"<code>IsRequestSuccess</code>","text":"<p>Gets or sets a value indicating whether the request was successful.</p>"},{"location":"ResponseEntity/#syntax","title":"Syntax","text":"<pre><code>public bool IsRequestSuccess { get; set; }\n</code></pre>"},{"location":"ResponseEntity/#responsetype","title":"<code>ResponseType</code>","text":"<p>Gets or sets the type of the response.</p>"},{"location":"ResponseEntity/#syntax_1","title":"Syntax","text":"<pre><code>public Type ResponseType { get; set; }\n</code></pre>"},{"location":"ResponseEntity/#response","title":"<code>Response</code>","text":"<p>Gets or sets the response object.</p>"},{"location":"ResponseEntity/#syntax_2","title":"Syntax","text":"<pre><code>public object Response { get; set; }\n</code></pre>"},{"location":"ResponseEntity/#message","title":"<code>Message</code>","text":"<p>Gets or sets the response message.</p>"},{"location":"ResponseEntity/#syntax_3","title":"Syntax","text":"<pre><code>public string Message { get; set; }\n</code></pre>"},{"location":"ResponseEntity/#constructors","title":"Constructors","text":""},{"location":"ResponseEntity/#responseentity","title":"<code>ResponseEntity()</code>","text":"<p>Initializes a new instance of the <code>ResponseEntity</code> class.</p>"},{"location":"ResponseEntity/#syntax_4","title":"Syntax","text":"<pre><code>protected ResponseEntity()\n</code></pre>"},{"location":"ResponseEntity/#methods","title":"Methods","text":""},{"location":"ResponseEntity/#setresponse","title":"<code>SetResponse</code>","text":"<p>Sets the response details.</p>"},{"location":"ResponseEntity/#syntax_5","title":"Syntax","text":"<pre><code>public virtual void SetResponse&lt;T&gt;(bool isSuccess, T response, string message = \"\");\n</code></pre>"},{"location":"ResponseEntity/#parameters","title":"Parameters","text":"<ul> <li>isSuccess: <code>bool</code> - Indicates if the response is successful.</li> <li>response: <code>T</code> - The response object.</li> <li>message: <code>string</code> - The message associated with the response.</li> </ul>"},{"location":"ResponseEntity/#example","title":"Example","text":"<pre><code>public class MyResponseEntity : ResponseEntity\n{\n    public override void SetResponse&lt;T&gt;(bool isSuccess, T response, string message = \"\")\n    {\n        IsRequestSuccess = isSuccess;\n        ResponseType = typeof(T);\n        Response = response;\n        Message = message;\n    }\n}\n</code></pre>"},{"location":"ResponseEntity/#references","title":"References","text":"<ul> <li>IApiResponse</li> <li>GenericResponseEntity</li> </ul>"},{"location":"UiManager/","title":"UiManager.cs Documentation","text":""},{"location":"UiManager/#overview","title":"Overview","text":"<p><code>UiManager</code> is a singleton class responsible for managing the UI components of the game. It initializes and controls various UI panels and responds to scene load events.</p>"},{"location":"UiManager/#public-methods","title":"Public Methods","text":"Method Name Description Parameters Return Type <code>UiManager()</code> Initializes a new instance of the <code>UiManager</code> class. None Constructor <code>CloseAll()</code> Closes all UI panels. None <code>void</code>"},{"location":"UiManager/#unity-functions","title":"Unity Functions","text":"Method Name Description Parameters Return Type <code>Start()</code> Called when the script instance is being loaded. None <code>void</code> <code>OnSceneLoad(Scene scene, LoadSceneMode mode)</code> Called when a scene is loaded. <code>Scene scene, LoadSceneMode mode</code> <code>void</code>"},{"location":"UiManager/#example-usage","title":"Example Usage","text":"<pre><code>public class ExampleUsage\n{\n    public void InitializeUiManager()\n    {\n        UiManager uiManager = new UiManager();\n        uiManager.CloseAll();\n\n        SceneManager.LoadScene(1);\n    }\n}\n</code></pre>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/","title":"UpdateAccountInfoOnAzureController_Playfab Class Documentation","text":""},{"location":"UpdateAccountInfoOnAzureController_Playfab/#overview","title":"Overview","text":"<p>The <code>UpdateAccountInfoOnAzureController_Playfab</code> class manages the updating of account information on Azure through PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IUpdateStatisticsResponse&gt;</code> class and implements the <code>IApiController&lt;IUpdateStatisticsResponse&gt;</code> interface.</p>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Core.Accounts;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Data.Abstract;\nusing flameborn.Sdk.Requests.Data.Entity;\nusing HF.Extensions;\nusing Newtonsoft.Json;\nusing PlayFab;\nusing PlayFab.CloudScriptModels;\nusing UnityEngine;\n\nnamespace flameborn.Sdk.Controllers.Data\n{\n    /// &lt;summary&gt;\n    /// Controller for updating account information on Azure through PlayFab.\n    /// &lt;/summary&gt;\n    public class UpdateAccountInfoOnAzureController_Playfab : Controller&lt;IUpdateStatisticsResponse&gt;, IApiController&lt;IUpdateStatisticsResponse&gt;\n    {\n        Account account;\n        string functionName;\n        private event Action&lt;IUpdateStatisticsResponse&gt; onGetResult;\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"UpdateAccountInfoOnAzureController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"account\"&gt;The account to update.&lt;/param&gt;\n        /// &lt;param name=\"functionName\"&gt;The name of the function to execute. Default is \"AddNewAccount\".&lt;/param&gt;\n        public UpdateAccountInfoOnAzureController_Playfab(Account account, string functionName = \"AddNewAccount\")\n        {\n            this.account = account;\n            this.functionName = functionName;\n        }\n\n        /// &lt;summary&gt;\n        /// Sends a request to update account information on Azure.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IUpdateStatisticsResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n\n            if (string.IsNullOrEmpty(functionName)) { errorLog = $\"{nameof(functionName)} is null or empty.\"; }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n            var request = TakeRequest();\n            PlayFabCloudScriptAPI.ExecuteFunction(request, OnGetAccountInfoResult_EventListener, OnError);\n        }\n\n        private void OnGetAccountInfoResult_EventListener(ExecuteFunctionResult result)\n        {\n            var response = new UpdateStatisticsResponse();\n\n            var json = result.FunctionResult.ToString();\n            var data = JsonConvert.DeserializeObject&lt;UpdatedAccountResponse&gt;(json);\n\n            response.SetResponse(data.Success, result, data.Message);\n            onGetResult?.Invoke(response);\n        }\n\n        private void OnError(PlayFabError error)\n        {\n            var response = new UpdateStatisticsResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        private ExecuteFunctionRequest TakeRequest()\n        {\n            return new ExecuteFunctionRequest\n            {\n                FunctionName = functionName,\n                FunctionParameter = new\n                {\n                    deviceId = SystemInfo.deviceUniqueIdentifier,\n                    email = account.Email,\n                    userName = account.UserData.UserName,\n                    password = account.Password,\n                    launchCount = account.UserData.LaunchCount,\n                    rating = account.UserData.Rating\n                },\n                GeneratePlayStreamEvent = true\n            };\n        }\n    }\n}\n</code></pre>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/#fields","title":"Fields","text":"<ul> <li>account: An instance of the <code>Account</code> class representing the account to be updated.</li> <li>functionName: The name of the function to execute on Azure.</li> </ul>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/#methods","title":"Methods","text":""},{"location":"UpdateAccountInfoOnAzureController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends a request to update account information on Azure. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>OnGetAccountInfoResult_EventListener(ExecuteFunctionResult result): Handles the event when the account info result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> <li>TakeRequest(): Constructs the request for updating account information.</li> </ul>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>UpdateAccountInfoOnAzureController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Core.Accounts;\nusing flameborn.Sdk.Controllers.Data;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var account = new Account { Email = \"example@example.com\", Password = \"password123\", UserData = new UserData { UserName = \"Player1\", LaunchCount = 5, Rating = 100 } };\n        var controller = new UpdateAccountInfoOnAzureController_Playfab(account);\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Account information updated successfully.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to update account information: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IUpdateStatisticsResponse</code> interface, refer to the IUpdateStatisticsResponse documentation.</p>"},{"location":"UpdateAccountInfoOnAzureController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>UpdateAccountInfoOnAzureController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Data</code> namespace.</p>"},{"location":"UpdateStatisticsController_Playfab/","title":"UpdateStatisticsController_Playfab Class Documentation","text":""},{"location":"UpdateStatisticsController_Playfab/#overview","title":"Overview","text":"<p>The <code>UpdateStatisticsController_Playfab</code> class manages the updating of player statistics on PlayFab within the Flameborn SDK. This class is derived from the <code>Controller&lt;IUpdateStatisticsResponse&gt;</code> class and implements the <code>IApiController&lt;IUpdateStatisticsResponse&gt;</code> interface.</p>"},{"location":"UpdateStatisticsController_Playfab/#class-definition","title":"Class Definition","text":"<pre><code>using System;\nusing flameborn.Sdk.Controllers.Abstract;\nusing flameborn.Sdk.Requests.Data.Abstract;\nusing flameborn.Sdk.Requests.Data.Entity;\nusing HF.Extensions;\nusing PlayFab;\nusing PlayFab.ClientModels;\nusing UnityEngine;\n\nnamespace flameborn.Sdk.Controllers.Data\n{\n    /// &lt;summary&gt;\n    /// Controller for updating player statistics on PlayFab.\n    /// &lt;/summary&gt;\n    public class UpdateStatisticsController_Playfab : Controller&lt;IUpdateStatisticsResponse&gt;, IApiController&lt;IUpdateStatisticsResponse&gt;\n    {\n        private (string name, int value)[] statistics;\n        private event Action&lt;IUpdateStatisticsResponse&gt; onGetResult;\n\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"UpdateStatisticsController_Playfab\"/&gt; class.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"statistics\"&gt;The statistics to update.&lt;/param&gt;\n        public UpdateStatisticsController_Playfab(params (string name, int value)[] statistics)\n        {\n            this.statistics = statistics;\n        }\n\n        /// &lt;summary&gt;\n        /// Sends the request to update player statistics.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"errorLog\"&gt;The error log to be populated in case of an error.&lt;/param&gt;\n        /// &lt;param name=\"listeners\"&gt;The listeners to process the response.&lt;/param&gt;\n        public override void SendRequest(out string errorLog, params Action&lt;IUpdateStatisticsResponse&gt;[] listeners)\n        {\n            errorLog = \"\";\n            if (statistics == null || statistics.Length == 0)\n            {\n                errorLog = $\"{nameof(statistics)} is null or empty.\";\n                return;\n            }\n\n            listeners.ForEach(l =&gt; onGetResult += l);\n            var request = TakeRequest();\n            PlayFabClientAPI.UpdatePlayerStatistics(request, OnUpdateStatisticsResult_EventListener, OnError);\n        }\n\n        private void OnUpdateStatisticsResult_EventListener(UpdatePlayerStatisticsResult result)\n        {\n            var response = new UpdateStatisticsResponse();\n            response.SetResponse(true, result, \"Update statistics succeeded.\");\n            onGetResult?.Invoke(response);\n        }\n\n        private void OnError(PlayFabError error)\n        {\n            var response = new UpdateStatisticsResponse();\n            response.IsRequestSuccess = false;\n            response.Message = error.ErrorMessage;\n            onGetResult?.Invoke(response);\n        }\n\n        private UpdatePlayerStatisticsRequest TakeRequest()\n        {\n            return new UpdatePlayerStatisticsRequest\n            {\n                Statistics = statistics.Select(stat =&gt; new StatisticUpdate { StatisticName = stat.name, Value = stat.value }).ToList()\n            };\n        }\n    }\n}\n</code></pre>"},{"location":"UpdateStatisticsController_Playfab/#fields","title":"Fields","text":"<ul> <li>statistics: The statistics to update on PlayFab.</li> </ul>"},{"location":"UpdateStatisticsController_Playfab/#methods","title":"Methods","text":""},{"location":"UpdateStatisticsController_Playfab/#public-methods","title":"Public Methods","text":"<ul> <li>SendRequest(out string errorLog, params Action[] listeners): Sends the request to update player statistics on PlayFab. <li>Parameters:<ul> <li>errorLog: The error log to be populated in case of an error.</li> <li>listeners: The listeners to process the response.</li> </ul> </li>"},{"location":"UpdateStatisticsController_Playfab/#private-methods","title":"Private Methods","text":"<ul> <li>TakeRequest(): Constructs the request for updating player statistics.</li> <li>OnUpdateStatisticsResult_EventListener(UpdatePlayerStatisticsResult result): Handles the event when the player statistics update result is received.</li> <li>OnError(PlayFabError error): Handles errors that occur during the request.</li> </ul>"},{"location":"UpdateStatisticsController_Playfab/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>UpdateStatisticsController_Playfab</code> class in a Unity project.</p> <pre><code>using UnityEngine;\nusing flameborn.Sdk.Controllers.Data;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        var controller = new UpdateStatisticsController_Playfab((\"statistic1\", 100), (\"statistic2\", 200));\n        controller.SendRequest(out string errorLog, response =&gt; \n        {\n            if (response.IsRequestSuccess)\n            {\n                Debug.Log(\"Player statistics updated successfully.\");\n            }\n            else\n            {\n                Debug.LogError(\"Failed to update player statistics: \" + response.Message);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"UpdateStatisticsController_Playfab/#see-also","title":"See Also","text":"<p>For more information on the <code>IUpdateStatisticsResponse</code> interface, refer to the IUpdateStatisticsResponse documentation.</p>"},{"location":"UpdateStatisticsController_Playfab/#file-location","title":"File Location","text":"<p>This class is defined in the <code>UpdateStatisticsController_Playfab.cs</code> file, located in the <code>flameborn.Sdk.Controllers.Data</code> namespace.</p>"},{"location":"UpdateStatisticsRequest/","title":"UpdateStatisticsRequest Class Documentation","text":""},{"location":"UpdateStatisticsRequest/#overview","title":"Overview","text":"<p>The <code>UpdateStatisticsRequest</code> class represents a request to update statistics in the Flameborn SDK. This class extends <code>Request&lt;IUpdateStatisticsResponse&gt;</code> and implements the <code>IApiRequest&lt;IUpdateStatisticsResponse&gt;</code> interface.</p>"},{"location":"UpdateStatisticsRequest/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data\n</code></pre>"},{"location":"UpdateStatisticsRequest/#inheritance","title":"Inheritance","text":"<ul> <li><code>Request&lt;IUpdateStatisticsResponse&gt;</code></li> <li>Implements: <code>IApiRequest&lt;IUpdateStatisticsResponse&gt;</code></li> </ul>"},{"location":"UpdateStatisticsRequest/#constructors","title":"Constructors","text":""},{"location":"UpdateStatisticsRequest/#updatestatisticsrequestiapicontrolleriupdatestatisticsresponse-controller","title":"<code>UpdateStatisticsRequest(IApiController&lt;IUpdateStatisticsResponse&gt; controller)</code>","text":"<p>Initializes a new instance of the <code>UpdateStatisticsRequest</code> class.</p>"},{"location":"UpdateStatisticsRequest/#syntax","title":"Syntax","text":"<pre><code>public UpdateStatisticsRequest(IApiController&lt;IUpdateStatisticsResponse&gt; controller)\n</code></pre>"},{"location":"UpdateStatisticsRequest/#parameters","title":"Parameters","text":"<ul> <li>controller: <code>IApiController&lt;IUpdateStatisticsResponse&gt;</code> - The API controller for the request.</li> </ul>"},{"location":"UpdateStatisticsRequest/#example","title":"Example","text":"<pre><code>IApiController&lt;IUpdateStatisticsResponse&gt; controller = new UpdateStatisticsController();\nUpdateStatisticsRequest updateStatisticsRequest = new UpdateStatisticsRequest(controller);\n</code></pre>"},{"location":"UpdateStatisticsRequest/#methods","title":"Methods","text":""},{"location":"UpdateStatisticsRequest/#sendrequest","title":"<code>SendRequest</code>","text":"<p>Sends the request to update statistics.</p>"},{"location":"UpdateStatisticsRequest/#syntax_1","title":"Syntax","text":"<pre><code>public override void SendRequest(out string errorLog, params Action&lt;IUpdateStatisticsResponse&gt;[] listeners);\n</code></pre>"},{"location":"UpdateStatisticsRequest/#parameters_1","title":"Parameters","text":"<ul> <li>errorLog: <code>out string</code> - The error log to be populated in case of an error.</li> <li>listeners: <code>params Action&lt;IUpdateStatisticsResponse&gt;[]</code> - The listeners to process the response.</li> </ul>"},{"location":"UpdateStatisticsRequest/#example_1","title":"Example","text":"<pre><code>updateStatisticsRequest.SendRequest(out string errorLog, response =&gt; { /* Handle response */ });\n</code></pre>"},{"location":"UpdateStatisticsRequest/#references","title":"References","text":"<ul> <li>IUpdateStatisticsResponse</li> <li>IApiController</li> </ul>"},{"location":"UpdateStatisticsResponse/","title":"UpdateStatisticsResponse Class Documentation","text":""},{"location":"UpdateStatisticsResponse/#overview","title":"Overview","text":"<p>The <code>UpdateStatisticsResponse</code> class represents the response for updating statistics in the Flameborn SDK. This class extends <code>ResponseEntity</code> and implements the <code>IUpdateStatisticsResponse</code> interface.</p>"},{"location":"UpdateStatisticsResponse/#namespace","title":"Namespace","text":"<pre><code>namespace flameborn.Sdk.Requests.Data.Entity\n</code></pre>"},{"location":"UpdateStatisticsResponse/#inheritance","title":"Inheritance","text":"<ul> <li><code>ResponseEntity</code></li> <li>Implements: <code>IUpdateStatisticsResponse</code></li> </ul>"},{"location":"UpdateStatisticsResponse/#attributes","title":"Attributes","text":"<ul> <li><code>[Serializable]</code></li> </ul>"},{"location":"UpdateStatisticsResponse/#references","title":"References","text":"<ul> <li>IUpdateStatisticsResponse</li> <li>ResponseEntity</li> </ul>"},{"location":"UpdatedAccountResponse/","title":"UpdatedAccountResponse Class Documentation","text":""},{"location":"UpdatedAccountResponse/#overview","title":"Overview","text":"<p>The <code>UpdatedAccountResponse</code> class represents the response received after updating an account within the Flameborn SDK.</p>"},{"location":"UpdatedAccountResponse/#class-definition","title":"Class Definition","text":"<pre><code>using Newtonsoft.Json;\n\nnamespace flameborn.Core.Accounts\n{\n    /// &lt;summary&gt;\n    /// Represents the response received after updating an account.\n    /// &lt;/summary&gt;\n    public class UpdatedAccountResponse\n    {\n        #region Properties\n\n        /// &lt;summary&gt;\n        /// Indicates whether the update was successful.\n        /// &lt;/summary&gt;\n        [JsonProperty(\"success\")]\n        public bool Success { get; set; } = false;\n\n        /// &lt;summary&gt;\n        /// Gets or sets the message associated with the update response.\n        /// &lt;/summary&gt;\n        [JsonProperty(\"Message\")]\n        public string Message { get; set; } = string.Empty;\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"UpdatedAccountResponse/#properties","title":"Properties","text":"<ul> <li>Success: Indicates whether the update was successful.</li> <li>Message: Gets or sets the message associated with the update response.</li> </ul>"},{"location":"UpdatedAccountResponse/#usage-example","title":"Usage Example","text":"<p>Below is an example of how to use the <code>UpdatedAccountResponse</code> class in a Unity project.</p> <pre><code>using flameborn.Core.Accounts;\nusing Newtonsoft.Json;\nusing UnityEngine;\n\npublic class ExampleUsage : MonoBehaviour\n{\n    private void Start()\n    {\n        string jsonResponse = \"{ \"success\": true, \"Message\": \"Account updated successfully.\" }\";\n        UpdatedAccountResponse response = JsonConvert.DeserializeObject&lt;UpdatedAccountResponse&gt;(jsonResponse);\n\n        if (response.Success)\n        {\n            Debug.Log(\"Update Success: \" + response.Message);\n        }\n        else\n        {\n            Debug.LogError(\"Update Failed: \" + response.Message);\n        }\n    }\n}\n</code></pre>"},{"location":"UpdatedAccountResponse/#file-location","title":"File Location","text":"<p>This class is defined in the <code>UpdatedAccountResponse.cs</code> file, located in the <code>flameborn.Core.Accounts</code> namespace.</p>"},{"location":"development-report/","title":"Development Report","text":"<p>This document is a report on the Flameborn multiplayer game project.</p>"},{"location":"development-report/#skills-demonstrated","title":"Skills Demonstrated","text":"<p>The project aims to showcase the following skill sets:</p> <ul> <li>Working with multiplayer game APIs</li> <li>Using Azure Functions and cloud scripts</li> <li>Working with PlayFab</li> <li>Programming skills</li> <li>Ability to design programming architecture</li> <li>Proficiency in Unity, game development, and game mechanics</li> <li>Competence in working with datasets and tables</li> <li>Coding skills</li> <li>Ability to document code</li> </ul>"},{"location":"development-report/#features-of-flameborn","title":"Features of Flameborn","text":"<p>Flameborn includes:</p> <ul> <li>Login, register, password recovery, and basic CRUD operations on Azure tables via APIs</li> <li>API management</li> <li>Matchmaking</li> <li>Event management</li> <li>Player management</li> <li>Game management</li> <li>Basic in-game functions</li> </ul>"},{"location":"development-report/#how-it-works","title":"How It Works","text":"<ol> <li> <p>Loader Scene:</p> <ul> <li>The application starts with the Loader scene, which communicates with the API via the <code>IApiRequest</code> interface injected from the SDK layer. It authenticates the user's account information and player data for use.</li> <li>The <code>IApiRequest</code> type uses an injected <code>IApiController</code> type, providing an abstraction that supports working with different types of APIs and promotes polymorphism.</li> </ul> </li> <li> <p>Main Menu:</p> <ul> <li>Once data processing in the Loader scene is complete, the UI is set up, and the MainMenu scene is loaded.</li> <li>The MainMenu scene allows players to log in, register, and start a new match.</li> <li>If a player has previously logged in, the application automatically loads the player's account on the next login.</li> </ul> </li> <li> <p>Matchmaking:</p> <ul> <li>When a player wants to start a new match, a ticket is created via the API, and players are matched based on their rating information.</li> <li>Upon successful matching, a match is created, and the match ID is distributed to the players. Players create a room using the match ID through the network API.</li> <li>The network API distributes information such as player readiness and nicknames.</li> <li>Once the information is processed on the network API, the game scene is loaded.</li> </ul> </li> <li> <p>Game Scene:</p> <ul> <li>In the game scene, each player has a campfire and workers.</li> <li>Players start with resources equivalent to their rating points.</li> <li>Players can spend their rating points at the campfire to spawn new workers.</li> <li>Players can select their workers and move them by clicking on empty spots on the screen.</li> <li>Players can move the camera by dragging their fingers on the screen.</li> <li>Players can collect resources with their workers to increase their resources and rating points.</li> </ul> </li> </ol>"},{"location":"development-report/#planned-features","title":"Planned Features","text":"<ul> <li>Allowing players to attack another player's workers with their own workers</li> <li>Allowing players to attack another player's campfire with their workers</li> <li>Time limit for matches</li> <li>Different types of characters (e.g., Soldier, Priest)</li> <li>Adding win/lose events</li> </ul>"},{"location":"development-report/#additional-resources","title":"Additional Resources","text":"<p>For more detailed information about the project, please refer to the README.</p> <p>For the development log and daily updates, check out the Daily-Log.</p>"},{"location":"GDD/game-desing-doc-flameborn/","title":"Game desing doc flameborn","text":""},{"location":"GDD/game-desing-doc-flameborn/#game-design-document-flameborn","title":"Game Design Document: Flameborn","text":"<p>Platform: Mobile (iOS, Android)</p> <p>Genre: Real-Time Strategy (RTS), Multiplayer</p>"},{"location":"GDD/game-desing-doc-flameborn/#contents-contents","title":"Contents {#contents}","text":"<ol> <li>Game Overview</li> <li>Gameplay Mechanics</li> <li>Player Movement</li> <li>Character Selection</li> <li>Command System</li> <li>Character Roles and Abilities</li> <li>Workers</li> <li>Soldiers</li> <li>Multiplayer Dynamics</li> <li>Resource Management</li> <li>User Interface (UI)</li> <li>Monetization Strategy</li> <li>Technical Specifications</li> <li>Art and Sound Design</li> </ol>"},{"location":"GDD/game-desing-doc-flameborn/#game-overview","title":"Game Overview","text":"<p>Flameborn is a real-time multiplayer strategy game where players control a team of characters to gather resources and defend or attack campfires. The goal is to collect wood and use strategic commands to make your campfire bigger than your opponents'.</p>"},{"location":"GDD/game-desing-doc-flameborn/#gameplay-mechanics","title":"Gameplay Mechanics","text":""},{"location":"GDD/game-desing-doc-flameborn/#player-movement","title":"Player Movement","text":"<ul> <li>Players can drag the screen to move their view around the map.</li> <li>Tap on a character to select it and activate command options.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#character-selection","title":"Character Selection","text":"<ul> <li>Players can select characters by tapping on them.</li> <li>When a character is selected, an action menu with various commands appears.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#command-system","title":"Command System","text":"<ul> <li>Idle: The character stands still.</li> <li>Gather Resources: The character gathers nearby resources (wood).</li> <li>Defense Mode: (Soldiers only) The character defends the campfire.</li> <li>Attack Mode: (Soldiers only) The character attacks designated targets.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#character-roles-and-abilities","title":"Character Roles and Abilities","text":""},{"location":"GDD/game-desing-doc-flameborn/#workers","title":"Workers","text":"<ul> <li>Move: Walk to a designated location.</li> <li>Gather Resources: Collect wood from the nearest resource point.</li> <li>Auto-Gather: Automatically gather resources within a certain range.</li> <li>Call: Summon all workers to the player's current screen location.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#soldiers","title":"Soldiers","text":"<ul> <li>Defend Campfire: Protect the campfire from enemy attacks.</li> <li>Attack Enemy Character: Fight with a selected enemy character.</li> <li>Attack Enemy Campfire: Target and damage the enemy campfire.</li> <li>Move: Walk to a designated location.</li> <li>Guard Area: Protect a specific area from enemy entry.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#multiplayer-dynamics","title":"Multiplayer Dynamics","text":"<ul> <li>Real-Time Strategy: Players compete in real-time to grow their campfires by gathering resources and attacking opponents.</li> <li>Resource Competition: Players must strategically gather wood from shared resource points.</li> <li>Campfire Battle: The size of the campfire reflects the player's progress and strength. Attacks on enemy campfires reduce their size.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#resource-management","title":"Resource Management","text":"<ul> <li>Wood: The primary resource used to grow the campfire and upgrade units.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#balance","title":"Balance","text":"<ul> <li>When a player attacks the opponent's campfire, their soldier dies, and the opponent's campfire shrinks.</li> <li>When a player attacks the opponent's soldier character, both soldiers die.</li> <li>When a player attacks the opponent's worker character, the worker dies, and the soldier's health reduces to half of its total health.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#upgrades","title":"Upgrades","text":"<ul> <li>Create Worker: Increase the number of workers to gather resources faster.</li> <li>Create Soldier: Increase the number of soldiers for defense and attack.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#6-user-interface-ui-user-interface-ui","title":"6. User Interface (UI) {#user-interface-ui}","text":""},{"location":"GDD/game-desing-doc-flameborn/#main-screen","title":"Main Screen","text":"<ul> <li>Drag to move the view around the map.</li> <li>Tap to select characters and resources.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#character-menu","title":"Character Menu","text":"<ul> <li>Appears when a character is selected.</li> <li>Includes commands like move, gather, attack, defend, and call.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#campfire-ui","title":"Campfire UI","text":"<ul> <li>Shows the size and health of the campfire.</li> <li>Displays available upgrades and current resource amount.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#monetization-strategy","title":"Monetization Strategy","text":""},{"location":"GDD/game-desing-doc-flameborn/#in-app-purchases","title":"In-App Purchases","text":"<ul> <li>Cosmetic skins for characters.</li> <li>Resource packs to accelerate progress.</li> <li>Special abilities or boosts providing temporary advantages.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#advertisements","title":"Advertisements","text":"<ul> <li>Optional video ads for rewards.</li> <li>Banner ads on the main menu screen.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#technical-specifications","title":"Technical Specifications","text":"<ul> <li>Engine: Unity</li> <li>Supported Devices: iOS 10.0+ and Android 5.0+</li> <li>Network: Real-time multiplayer via P2P or dedicated servers</li> <li>Performance: Optimized for smooth performance on mid-range mobile devices</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#art-and-sound-design","title":"Art and Sound Design","text":""},{"location":"GDD/game-desing-doc-flameborn/#art-style","title":"Art Style","text":"<ul> <li>Visuals: Stylized, colorful graphics suitable for mobile screens.</li> <li>Characters: Distinct designs for workers and soldiers.</li> <li>Environment: Vibrant landscapes filled with resource points and campfires.</li> </ul>"},{"location":"GDD/game-desing-doc-flameborn/#sound-design","title":"Sound Design","text":"<ul> <li>Background Music: Dynamic music that changes based on game state (calm during resource gathering, intense during battles).</li> <li>Sound Effects: Feedback sounds for commands, resource gathering, and combat.</li> </ul> <p>This document serves as a foundational guide for the development of Flameborn, outlining core gameplay mechanics, character functions, multiplayer dynamics, resource management, and other critical elements. More details and iterations will be added as development progresses.</p>"},{"location":"diaries/daily-log/","title":"[1.G\u00fcn] [08/06/2024] Proje Haz\u0131rl\u0131\u011f\u0131","text":"<ul> <li>Case study dosyas\u0131n\u0131 inceledim.</li> <li>Proje gereksinimlerini tespit ettim.</li> <li>Proje i\u00e7in GDD d\u00f6k\u00fcman\u0131 haz\u0131rlad\u0131m.</li> <li>Github reposu olu\u015fturdum.</li> <li>Photon'un son g\u00fcncelleme notlar\u0131na g\u00f6z att\u0131m.</li> <li>Proje i\u00e7in mimari yap\u0131y\u0131 belirledim.</li> <li>Yap\u0131lacaklar listesi olu\u015fturdum.</li> </ul>"},{"location":"diaries/daily-log/#2gun-09062024-projenin-olusturulmas","title":"[2.G\u00fcn] [09/06/2024] Projenin olu\u015fturulmas\u0131","text":"<ul> <li>Architecture Diagram olu\u015fturuldu ve repo'ya eklendi.</li> <li>Unity Editor'\u00fcn 2022.3.10f1 versiyonunu y\u00fckledim.</li> <li>PlayFab d\u00f6k\u00fcmantasyonunu inceledim.</li> <li>flameborn-unity projesini olu\u015fturdum. Proje src klas\u00f6r\u00fc alt\u0131na yerle\u015ftirildi.</li> <li>[Error] PlayFab Login hatas\u0131: PlayFab SDK'sini yap\u0131land\u0131r\u0131rken, Editor Extension Resources klas\u00f6r\u00fc alt\u0131nda bulunan PlayFabEditorPrefsSo.asset objesi statik tan\u0131m\u0131 \u00fczerinden bulunamad\u0131. Bu sebeple yeni bir instance yaratmaya \u00e7al\u0131\u015f\u0131rken hata olu\u015ftu. \u0130lgili kod blo\u011funa elle hata y\u00f6netimi eklenerek sorun a\u015f\u0131ld\u0131.</li> <li>API bilgilerinin gizlili\u011fini sa\u011flamak i\u00e7in, .\\src\\flameborn-unity\\Assets\\PlayFabEditorExtensions\\Editor\\Resources\\PlayFabEditorPrefsSO.asset ve .\\src\\flameborn-unity\\Assets\\PlayFabSDK\\Shared\\Public\\Resources\\PlayFabSharedSettings.asset dosyalar\u0131ndaki de\u011fi\u015fiklikler git taraf\u0131ndan izlenmeyecek \u015fekilde ayarland\u0131.</li> <li>HypeFire eklendi.</li> <li>Geli\u015ftirme loglar\u0131m\u0131 file'a kaydetmemi sa\u011flayan Logger ekliyorum.</li> <li>Geli\u015ftirme Loglar\u0131</li> <li>PlayFab i\u00e7in login ve User bilgilerini bar\u0131nd\u0131ran json format\u0131nda configuration file olu\u015fturdum. Login ve register i\u00e7in gerekli bilgileri bar\u0131nd\u0131racak.</li> <li>Login sistemi tamamland\u0131, PlayFab \u00fczerinde API test edildi. </li> <li>PlayFab \u00fczerinde user register i\u015flemleri i\u00e7in kullan\u0131c\u0131n\u0131n, ilk oyununu bitirmesini veya 2.kez oyunu ba\u015flatmas\u0131n\u0131 bekleyecek \u015fekilde yap\u0131land\u0131raca\u011f\u0131m.</li> </ul>"},{"location":"diaries/daily-log/#3gun-10062024-playfab-user-register","title":"[3.G\u00fcn] [10/06/2024] PlayFab User Register","text":"<ul> <li>Azure portal \u00fczerinde tablo olu\u015fturdum</li> <li>Device temelli deneysel bir register sistemi kurgulad\u0131m tabloyu buna uygun olarak \u015fekillendirdim.      Tablo \u015funlar\u0131 i\u00e7erir:         - DeviceId         - EMail         - LaunchCount         - Password         - Rating         - UserName</li> <li>Register olan kullan\u0131c\u0131lar bu bilgilerle azure'da kay\u0131t edilicek.</li> <li>Tabloda ki veriler \u00fczerinde crud i\u015flemleri yapabilmem i\u00e7in Azure Functionlar\u0131 olu\u015fturdum.</li> <li>Function source kodu buarda.</li> <li>Functionlar\u0131 power shell kullanarak test ettim.</li> <li>Azure API olu\u015fturmak i\u00e7in Unity'de logic'i \u015fekillendirdim.</li> <li>Azure functionlar\u0131n ba\u011flant\u0131 adresini tutan Azure Configuration dosyas\u0131n\u0131 json format\u0131nda olu\u015fturdum. Dosya de\u011fi\u015fiklikleri git taraf\u0131ndan izlenmeyecek \u015fekilde ayarland\u0131.</li> <li>Configuration dosyas\u0131 buarada dosyan\u0131n sizin functionlar\u0131n\u0131za g\u00f6re doldurulmas\u0131 gerekir.</li> <li>Dosyadaki de\u011fi\u015fkenlerin isimlerini sonra d\u00fczenleyece\u011fim.</li> </ul>"},{"location":"diaries/daily-log/#4gun-11062024-azure-configurasyonlarn-tamamla","title":"[4.G\u00fcn] [11/06/2024] Azure Configurasyonlar\u0131n\u0131 Tamamla","text":"<ul> <li>Refectoring yapt\u0131m.</li> <li>Azure tablolar\u0131 ile yapt\u0131\u011f\u0131m crud i\u015flemleri i\u00e7in test senaryonar\u0131 uygulad\u0131m.</li> <li>Login i\u015flemlerini test ettim.</li> <li>Login, Register, Recovery i\u00e7in logic haz\u0131rlad\u0131m ve ui testleri yapt\u0131m.</li> </ul>"},{"location":"diaries/daily-log/#5gun-12062024","title":"[5.G\u00fcn] [12/06/2024]","text":"<ul> <li>Azure functionlar\u0131 g\u00fcncellendi.</li> <li>Mevcut kod yeni fonksiyonlar i\u00e7in uygun hale getirildi.</li> <li>Azure toblolar\u0131 ile ilgili i\u015flemler tamamland\u0131.</li> <li>Login, registeri recovery i\u015flemleri tamamland\u0131.</li> <li>Playfab i\u00e7in email ile giri\u015f eklendi.</li> </ul>"},{"location":"diaries/daily-log/#6gun-12062024","title":"[6.G\u00fcn] [12/06/2024]","text":""}]}